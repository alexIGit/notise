==== Install ====
sudo apt-get install git
=================

 ==== Инструцкия ====
 ---- Алгоритм действий ----
 Каждая задача решается в своей ветке.
	Создаётся ветка, основывающаяся на последней копии master ветки. 
	Название новой ветки содержит класс задачи, краткое описание, номер задачи в БТ. 		Например feature/sessions_add_datetime_filter.5503
	Все изменения производятся внутри этой ветки

 Коммитим сразу, как что-то получили осмысленное.
	После того как код в ветке сделан и отлажен, 
	все изменения закоммичены, 
	данная ветка ребейзится относительно последнего мастера, 
	и пушится в центральный репозиторий.

 В master мержится не разработчиком, 
 а вторым человеком, который производит вычитку и  тестирование изменения
	Второй человек, работающий над тем же проектом, 
	делает к себе pull центрального репозитория.
	Если он уже смотрел – то удаляет свою локальную копию ветки, 
	после чего переключается на указанную ветку. 
  	Прочитывает код, проверяет его работоспособность, 
	после чего либо отдаёт на доработку, если там обнаружены проблемы, 
	либо делает еще раз rebase поверх мастера, и слияние ветки с мастером.

 Все коммиты должны быть осмысленно подписаны.
 Репозиторий должен держаться сухим и шелковистым
	После слияния с мастером, 
	ревьюер пушит новый мастер в центральный репозиторий,
	удаляет у себя локальную ветку задачи, 
	пушит в мастер удаление ветки задачи.

	Разработчик удаляет локальную ветку задачи 
	после того как задача была закрыта и изменения попали в master
 ----
 ---- Правила ведения чистых коммитов

	Все коммиты, которые попадают в центральную ветку:

    1. Автором должен быть прописан разработчик – Имя, Фамилия, рабочий e-mail.

    2. Текст комментария должен содержать краткое описание изменения. 

    3. Коммит не должен содержать в себе файлы, не относящиеся к изменениям. 
	Если ваша IDE, OS, какой-то плагин какому-либо софту использующемуся 
	при разработке создают технические файлы, 
	либо добавьте их в .gitignore, 
	либо не добавляйте к коммиту, 
	либо удаляйте перед коммитом.

    4. Коммит не должен добавлять/убирать пустые строки, 
       менять пробелы на табы и наоборот, менять число пробелов и т. п. 
       нигде, кроме случаев, относящихся к сути коммита. 

    5. Стиль исходного кода и отступов должен совпадать с текстом вокруг.
	То есть, если всюду в файле используются табы для отступа, 
	не следует вставлять еще один case выровненный пробелами.

    6. Минимизация конфликтов. 
	При добавлении кода следует стараться форматировать код так, 
	чтобы модификация его приводила к минимуму конфликтов при слиянии.
 
 ====================

 ==== Подготовка  ==== 	https://htmlacademy.ru/blog/187-git-console
 http://dev.call2ru.com/vs/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%D1%81%20Git.pdf

 1. Устанавливаются системные пакеты ssh-client и git

 2. Создаётся приватный ключ: 
	ssh-keygen -t dsa -C "Ivan Petrov <work@mail>"
	ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

    Проверяем доступность ключа командой:
	eval "$(ssh-agent -s)"
    
    Добавляем ключ в ssh-agent. 
	ssh-add ~/.ssh/your_key_name.

// 28.02: сначала в github, потом ssh-add


 3. Добавляем новый ключ в https://github.com/settings/keys
    из 	~/.ssh/your_key_name.pub	// обязательно .pub

 4. Проверка: ssh -T git@github.com

	Если ошибка с путями т.е: у меня не было папки ~/.ssh, то:
	ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts


	git add -> commit -> clone -> git remote add origin https... -> git push -u origin master

 3. Настраивается ФИО и Емейл автора:

	 git config --global user.name "Your Name"
	 git config --global user.email "your_email@whatever.com"

	   --local
	   --system
	
	Параметры установки окончаний строк
 git config --global core.autocrlf input
 git config --global core.safecrlf true


 git config --list	- проверка настроек

 ====================

	3. Создание проекта
 git init 			-  создать git репозиторий из этого каталога

 git add hello.html		- добавим в репозиторий hello.html
 git add .			- добавление всех изменений файлов
 git commit -m "First Commit"	-| -m - делает комментарий в командной строке.
				 | без -m открывается редактор по умолчанию 

	4. Проверка состояния
 git status			- Проверьте состояние репозитория
 git diff			- более подроюно показывает изменения
 git diff --cached		-| что вы проиндексировали и что войдёт в следующий коммит
 git diff --staged		 |

	5. Внесение изменений
 git status 

	6. Индексация изменений
 git add hello.html
 git status
 git reset 	- можно снять индексацию этих изменений

	7. Индексация и коммит
 git add a.html
 git add b.html
 git commit -m "Changes for a and b"

 git add c.html
 git commit -m "Unrelated change to c"

  git commit -a -m "Изменения"	- автоматически индексирует изменения и коммит

	9. Изменения, а не файлы
 изменение hello.html
 git add hello.html

 изменение hello.html

 git status

 git commit -m "Коммит 1-го изменения"
 git status

 Добавьте второе изменение
 git add .			- добавление всех изменений в файлы текущего каталога и его подкаталоги
 git status
 git commit -m "Коммит 2-го изменения"

	10. История
 git log			- Получение списка произведенных изменений — функция команды
 	-p	- показывает дельту (разницу/diff), привнесенную каждым коммитом.
	-2	- ограничит вывод до 2-х последних записей
	-p --word-diff		- получить дельту по словам вместо обычной дельты по строкам
	--stat			- получить некоторую краткую статистику по каждому коммиту
	
	-p		Для каждого коммита показывать дельту внесённых им изменений.
	--word-diff	Показывать изменения на уровне слов.
	--stat		Для каждого коммита дополнительно выводить статистику по изменённым файлам.
	--shortstat	Показывать только строку changed/insertions/deletions от вывода с опцией --stat.
	--name-only	Показывать список изменённых файлов после информации о коммите.
	--name-status	Выводить список изменённых файлов вместе 
			с информацией о добавлении/изменении/удалении.
	--abbrev-commit	Выводить только первые несколько символов контрольной суммы SHA-1 вместо всех 40.
	--relative-date	Выводить дату в относительном формате 
			(например, "2 weeks ago") вместо полной даты.
	--graph		Показывать ASCII-граф истории ветвлений и слияний рядом с выводом лога.
	--pretty	Отображать коммиты в альтернативном формате. 
			Возможные параметры: 
			oneline, short, full, fuller 
			и format (где вы можете указать свой собственный формат).

	--since=2.weeks	выдаёт список коммитов, сделанных за последние две недели
			точную дату (“2008-01-15”) или 
			относительную дату, такую как “2 years 1 day 3 minutes ago”.

	-(n)		Показать последние n коммитов
	--since, --after	Ограничить коммиты теми, которые сделаны после указанной даты.
	--until, --before	Ограничить коммиты теми, которые сделаны до указанной даты.
	--author	Показать только те коммиты, автор которых соответствует указанной строке.
	--committer	Показать только те коммиты, коммитер которых соответствует указанной строке.


 git log --pretty=oneline	- однострочный формат
 	Контроль отображения записей
 	Есть много вариантов выбора, какие элементы отображаются в логе:
 git log --pretty=oneline --max-count=2
 git log --pretty=oneline --since='5 minutes ago'
 git log --pretty=oneline --until='5 minutes ago'
 git log --pretty=oneline --author=<your name>
 git log --pretty=oneline --all


 git log --all --pretty=format:"%h %cd %s (%an)" --since='7 days ago'	-| Вот что я использую для
									 | просмотра изменений, сделанных
			| за последнюю неделю. Я добавлю --author=alex, если я хочу увидеть только
			| изменения, которые сделал я.

 git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short	-| 

	--pretty="..." 	— определяет формат вывода.
	%h 		— укороченный хэш коммита
	%d 		— дополнения коммита («головы» веток или теги)
	%ad (--date)	— дата коммита
	%s 		— комментарий
	%an 		— имя автора
	--graph 	— отображает дерево коммитов в виде ASCII-графика
	--date=short 	— сохраняет формат даты коротким и симпатичным

	%H	Хеш коммита
	%T	Хеш дерева
	%t	Сокращённый хеш дерева
	%P	Хеши родительских коммитов
	%p	Сокращённые хеши родительских коммитов
	%ae	Электронная почта автора
	%ar	Дата автора, относительная (пр. "2 мес. назад")
	%cn	Имя коммитера
	%ce	Электронная почта коммитера
	%cd	Дата коммитера
	%cr	Дата коммитера, относительная
	%s	Комментарий

	Автор — это человек, изначально сделавший работу, 
	коммитер — это человек, который последним применил эту работу. 

	11. Алиасы https://githowto.com/ru/aliases 	
==== Windows ====
 git config --global alias.co checkout
 git config --global alias.ci commit
 git config --global alias.st status
 git config --global alias.br branch
 git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
 git config --global alias.type 'cat-file -t'
 git config --global alias.dump 'cat-file -p'

==== UNIX ====
в каталоге $HOME -> .gitconfig
[alias]
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  type = cat-file -t
  dump = cat-file -p
================== использование: git st
==== .bashrc ====
alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
alias go='git checkout '
alias gk='gitk --all&'
alias gx='gitx --all'

alias got='git '
alias get='git '
================== 

 12. Получение старых версий

 git checkout master		- переход к ветке master

13. Создание тегов версий

 ---- ---- легуовесная метка: git tag

 git tag v1		 	- Создайте тег первой версии
 git checkout v1^		- переход предшедствующей версии v1
 git checkout v1-beta		- Переключение по имени тега

 git tag 			- просмотр тегов
 git tag -l 'v1.4.2.*'		- просмотр только выпусков 1.4.2.[1,2,...]

 git hist master --all		- Просмотр Тегов в логах
 git show v1			- просмотр метки

 ---- ---- аннотированные метки: git tag -a
 
 git tag -a v1.4 -m 'my version 1.4'
	
	-m 	- задаёт меточное сообщение, которое будет храниться вместе с меткой

 git show v1.4	- просмотреть данные метки вместе с коммитом, который был помечен

 ---- ---- подписанные метки: git tag -s
 Вы также можете подписывать свои метки с помощью GPG, конечно, если у вас есть ключ
 
 git tag -s v1.5 -m 'my signed 1.5 tag'

 ---- ---- Верификация меток: git tag -v [имя метки]

 ---- ---- Выставление меток позже
 1. git log --pretty=oneline			- отсюда берем хэш [9fceb02]
 2.  git tag -a v1.2 -m 'version 1.2' 9fceb02	- ставим метку на этот хэш

14. Отмена локальных изменений (до индексации) (до git add)
 
 git checkout hello.html	
 
15. Отмена проиндексированных изменений (перед коммитом) (после git add)

 git reset HEAD hello.html
 git checkout hello.html

16. Отмена коммитов

 git revert HEAD		- редактирование последнего коммита
 git revert HEAD --no-edit	- показ последнего коммита

17. Удаление коммиттов из ветки

 git tag oops		- отметить коммит
 git reset --hard v1	- v1 - отметка перед удаляемым коммитом
			  --hard указывает, что рабочий каталог должен
			    быть обновлен в соответствии 
			    с новым head ветки

 git hist --all		- просмотр всех коммитов, даже удаленных

18. Сборщик мусора (Удаление тега oops) 

  git tag -d oops	- oops - удаленная метка

19. Внесение изменений в коммиты
 после git add
 
 git commit --amend -m "Add an author/email comment"

 {
  Для примера, если после совершения коммита вы осознали,
  что забыли проиндексировать изменения в файле, 
  которые хотели добавить в этот коммит, вы можете сделать что-то подобное:

	$ git commit -m 'initial commit'
	$ git add forgotten_file
	$ git commit --amend
  Все три команды вместе дают один коммит — второй коммит заменяет результат первого.
 }
 
20. Перемещение файлов

 I.	
 git mv hello.html lib		- git переместит и проиндексирует

 II.				- если перемещаем не git-ом
 mv hello.html lib		- переместить
 git add lib/hello.html		- проиндексировать
 git rm hello.html		- удалить лишнее из индексации
 

git rm -f hello.html		- принудительное удаление
				  Это сделано для повышения безопасности,
				  чтобы предотвратить ошибочное удаление данных, 
				  которые ещё не были записаны в снимок состояния 
				  и которые нельзя восстановить из Git'а.
 git rm --cached readme.txt	- удалить файл из индекса, оставив его при этом в рабочем каталоге
 
21. Структура
23. Git внутри: Работа непосредственно с объектами git

 git hist --max-count=1		- Поиск последнего коммита
	
 git cat-file -t <hash>		| Вывод последнего коммита
 git cat-file -p <hash>		-

 git cat-file -p <treehash>	-| вывод дерева	
		<hellohash>	-| или файла 
				  (*hash достаточно 7 знаков)

24. Создание ветки

 git checkout -b style
 
 git branch			- просмотр веток локально
 git branch -a			- просмотр всех веток (+удаленных)
 git branch --merged		- ветки, которые вы слили в ветку, на которой сейчас находитесь
 git branch --no-merged		- ветки, содержащие наработки, которые вы не слили в тек.ветку

 git branch -v			- посмотреть последний коммит на каждой из веток

28. Слияние	(противовес перебазированию)

 git checkout style	- переход в style
 git merge master	- слияние master в style
 git hist --all		- показать, что получилось

30. Разрешение конфликтов
 
 Вам необходимо вручную разрешить конфликт. Внесите изменения в  lib/hello.html для достижения следующего результата.

 git add lib/hello.html
 git commit -m "Merged master fixed conflict."
 
34. Перебазирование	(противовес слиянию)

	Слияние VS перебазирование
 Конечный результат перебазирования очень похож на результат слияния.
 Ветка style в настоящее время содержит все свои изменения,
	а также все изменения ветки master. 
 Однако, дерево коммитов значительно отличается.
 Дерево коммитов ветки style было переписано таким образом,
 	что ветка master является частью истории коммитов.
 Это делает цепь коммитов линейной и гораздо более читабельной.

	Когда использовать перебазирование, а когда слияние?
 Не используйте перебазирование …
 1. Если ветка является публичной и расшаренной. 
    Переписывание общих веток будет мешать работе других членов команды.
 2. Когда важна точная история коммитов ветки 
    (так как команда rebase переписывает историю коммитов).

 Учитывая приведенные выше рекомендации, 
 я предпочитаю использовать rebase для кратковременных, локальных веток, 
 а слияние для веток в публичном репозитории.

 ==== Репозитории ====
37. Клонирование репозиториев

 git clone hello cloned_hello	- hello 	- что надо клонировать
				  cloned_hello	- куда надо клонировать

 ---- 
 git remote		- Узнать об именах удаленных репозиториев
		-v	- какому URL соответствует сокращённое имя в Git
 git remote show origin	- получить более подробную информацию 
			  об имени по умолчанию

 git remote add nameTeam адрес	- добавление удаленной ссылки в проект с названием nameTeam из адреса 

 git fetch nameTeam 	-> nameTeam/master


42. Извлечение изменений
 pwd -> clone_hello

 git fetch			- из оригинала в клонированный

	git fetch будет извлекать новые коммиты из удаленного  репозитория, 
	но не будет сливать их с вашими наработками в локальных ветках.

43. Слияние извлеченных изменений

 git merge origin/master

 ---- 
 git pull == git fetch && git merge origin/master

45. Добавление ветки наблюдения

 git branch --track style origin/style
 
 git branch -a
 git hist --max-count=2

46. Чистые репозитории

 git clone --bare hello hello.git

47. Добавление удаленного репозитория
 
 в каталоге /hello/

 git remote add shared ../hello.git

 git remote add [сокращение] [url]
 git remote add pb git://github.com/paulboone/ticgit.git

47.1 переименование удаленного репозитория

 git remote rename name new_name
	
	Стоит упомянуть, что это также меняет для вас имена удалённых веток.

47.2 удаление репозитория
 
 git remote rm paul

48. Отправка изменений в общий репозиторий

 git checkout master
 git push shared master

49. Извлечение общих изменений
 в каталоге /cloned_hello/

 git remote add shared ../hello.git
 git branch --track shared master
 git pull
 cat README

50. Размещение ваших git репозиториев (у меня не получилось)
  	Запуск git сервера

	# (From the work directory)
 git daemon --verbose --export-all --base-path=.

	Теперь в отдельном окне терминала перейдите в ваш рабочий каталог
	ВЫПОЛНИТЕ:
	# (From the work directory)
 git clone git://localhost/hello.git network_hello

===============
Самый основной метод:
1. Форкаете репозиторий github.com/user1/project, получаете github.com/you/project
2. Уже форкнутый репозиторий сливаете себе на комп:
git clone git@github.com:/you/project project
3. Создаёте отсылку на «родительский» репозитарий, например как на upstream
git remote add git@github.com:/user1/project upstream, чтобы потом сливать изменения с «родителя» себе git pull upstream master
4. Создаёте новую ветку
git checkout -b feature
5. Работаете, делаете коммиты, в случае необходимости отслеживания изменений в «родителе», сливаете изменения с него и вливаете в свою ветку таким образом:
git checkout master
git pull upstream master
git checkout feature
git merge master
6. Когда работу сделали, заливаете изменения в свой github-репозиторий в свою ветку:
git push origin feature
7. Теперь идёте на гитхаб, в свой репозиторий и жмёте вверху кнопочку «Pull request»
8. Слева выбираете в какую ветку будут вливаться изменения в родительском репозитории, справа — какие изменения будут браться с вашего репозитория. По примеру: справа project/master, слева project/feature.
ВЫЖНО: Договоритесь с владельцем «родительского» репозитория, в какую ветку будете вливать изменения (он может написать это в README)
9. Заполняете название и описание (название потом попадёт в описание мёрдж-коммита и станет достоянием общественности, учтите это).
10. Нажимаете Send Pull Request

Вуаля, вы его отправили. Владелец рассмотрит ваши изменения и, возможно, их примет и вольёт к себе.
На практике, лучше перед посылкой пулл-реквестов, вручную синхронизироваться с веткой, в которую будете посылать изменения, чтобы у владельца merge прошёл гладко (больше шансов, что пулл примут ;-) )
Не забудьте потом сделать git pull upstream master, чтобы увидеть изменения у себя.

Надеюсь, это мини-руководство поможет вам сделать мир чуточку лучше )))
  tulskiy  9 августа 2011 в 18:14    0     
git merge master
Вот тут, если я не ошибаюсь создастся мерж-коммит, так? A вдруг мэйнтейнер не захочет чтобы у него в истории были невнятные merge from upstream/master?

  Envek  10 августа 2011 в 05:18    0     
Тогда стоит посмотреть в сторону git rebase
git rebase master
Правда, стоит учесть, что git rebase меняет id коммитов, и, следовательно, его нужно делать ТОЛЬКО тогда, когда ваши изменения ещё лежат локально (т.е. ещё не за-push-ены на удалённый репозитарий)
 FZambia  26 сентября 2012 в 09:35    0     
в 3-ем пункте, чтобы сделать отсылку на оригинальный репозиторий — нужно адрес репы и upstream поменять местами:
git remote add upstream https://github.com/user1/project
==== Литература:
[1]: https://githowto.com/ru

==== работа ====
 1. Создаем новую ветку
	git checkout -b новая-ветка

	git branch -d ветка			- удалить ветку
	git branch -m старое-имя новое-имя	- переименовать ветку
 	git branch -dr репо/ветка		- удалить ветку в удаленном репозитории

 2. Когда готов код: запомнить и зафиксировать:
	git add -A

 3. git commit -m "ваше сообщение"

 4. Опубликовать:
	git push репо ветка

 5. Пулл реквест.

 6. Обновляем свой репозиторий

   В вашем локальном репозитории введите команду 
	git checkout master
   Заберите изменения из оригинального репозитория¹ с помощью команды: 
	git pull academy master ¹ 
	В /academy/ должна быть ссылка на  оригинальный репозиторий. 
	Если её там нет, добавьте:
		git remote add academy git@github.com:your-repo.git
	Вместо academy вы можете дать любое другое название.
	
  Отправьте изменения в ваш форк на Гитхабе git push.

==== .gitignore
		# комментарий — эта строка игнорируется
 *.a		# не обрабатывать файлы, имя которых заканчивается на .a
 !lib.a		# НО отслеживать файл lib.a, несмотря на то, 
		  что мы игнорируем все .a файлы с помощью предыдущего правила
 /TODO		# игнорировать только файл TODO находящийся в корневом каталоге,
		  не относится к файлам вида subdir/TODO
 build/		# игнорировать все файлы в каталоге build/
 doc/*.txt	# игнорировать doc/notes.txt, но не doc/server/arch.txt
 doc/**/*.txt	# игнорировать все .txt файлы в каталоге doc/
~~~~
*.[oa]
*~
================

==== dj_girls ====
git init
git config --global user.name "Your Name"
git config --global user.email you@example.com

.gitignore

git status
git add --all .
git commit -m "My Django Girls app, first commit"

git remote add origin https://github.com/<your-github-username>/my-first-blog.git
git push -u origin master

==================
 git mergetool 	- графический инструмент для разрешения конфликтов
