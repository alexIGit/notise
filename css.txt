@import url('styles.css');

---- Приоритеты таблиц стилей ---------- снизу в вверх

 Внедренные 	- <a href="http://google.com" style="color:green;">Посетите Google</a>
 Внутренние	- <style>...</style>
 Внешние
 Пользовательские 
 Исходные стили	- браузер

=========================================================================

==== Единицы измерения =================================================
 px 
 em 	– задаёт размер относительно шрифта родителя, 
    	  можно относительно конкретных символов: "x"(ex) и "0"(ch), 
    	  используется там, где нужно упростить масштабирование компоненты.
 rem 	– задаёт размер относительно шрифта <html>,(html{ font-size: ??px} ) 
	  используется для удобства глобального масштабирования: 
	  элементы которые планируется масштабировать, задаются в rem, а JS меняет шрифт у <html>.
 % 	– относительно такого же свойства родителя (как правило, но не всегда), 
	  используется для ширин, высот и так далее, без него никуда, но надо знать, относительно чего он считает проценты.
 vw, vh, vmin, vmax – относительно размера экрана.


========================================================================

==== Селекторы CSS ======================================================
 ---- приоритет селекторов
 !important
 #id
 .class
 p attribut
---------------------------

 Универсальный селектор		- * 		  { }
 Селектор идентификаторов	- #mydiv 	  { }
 Селектор класса		- .myclass 	  { }
				  p.main 	  { }
 Селектор типа			- p 		  { }
 Селектор потомков		- p b 		  { }
 Селектор дочерних элементов	- p > b 	  { }
 Селекторы смежных элементов 	- i + b 	  { }
 p.tla  ~ p			- применяется для всех элементов p (все эти элементы - братья) 
				  после элемента p.tla (тоже брат)

 ---- Селектор атрибутов -----------

 [attr]				– атрибут установлен
 =	[type="submit"] 	– атрибут равен submit.

 ^	[href^='http://website']- начинается
 |=	[attr|="val"]		– атрибут равен val или начинается с val-, например равен "val-1".


 *	[href*='google']	- содержит
 ~	[attr~="val"]		– атрибут содержит val как одно из значений через пробел.
				[attr~="delete"] верно: "edit delete" и неверно: "undelete" или "no-delete".
 $	[src$='.png']		- заканчивается
 
---------------------

---- Псевдоклассы -----------------
 :first-child 		– 
 :last-child 		– 
 :only-child 		– единственный потомок своего родителя, соседних элементов нет.
 :nth-child(a) 		– потомок номер a своего родителя, например 
			  	:nth-child(2) – второй потомок. Нумерация начинается с 1.
 :nth-child(an+b) 	– расширение предыдущего селектора через указание номера потомка формулой,
			  где a,b – константы, а под n подразумевается любое целое число.
 :nth-child(2n) 	- чётные.
 :nth-child(2n+1) 	- нечётные.
 :nth-child(3n+2) 	- даст элементы номер 2, 5, 8 и так далее.

 :nth-last-child(a)	–| то же самое, но отсчёт начинается с конца, например
 :nth-last-child(an+b)   |	:nth-last-child(2) – второй элемент с конца.

    ------- Фильтр по месту среди соседей с тем же тегом

 :first-of-type
 :last-of-type
 :only-of-type
 :nth-of-type
 :nth-last-of-type
 :nth-of-type(2n)

 :not(селектор) 	– все, кроме подходящих под селектор.
 :focus 		– в фокусе.
 :hover 		– под мышью.
 :empty 		– без детей (даже без текстовых).
 :checked		-| состояния INPUT
 :disabled		 |
 :enabled 		 |
 :target 		– этот фильтр сработает для элемента, ID которого совпадает с анкором #... текущего URL.
			  Например, если на странице есть элемент с id="intro", то правило 
			  :target { color: red } подсветит его в том случае, 
			  если текущий URL имеет вид http://...#intro.

::first-letter
::first-line
 :link			- не посещенная
 :visited		- посещенная	
 :active		- момент нажатия
 
==========================================
==== переменные ==========================
        :root {
            --spacing: 50px;
        }

        img {
            padding: var(--spacing);
        }

function handleUpdate() {
            const suffix = this.dataset.sizing || '';	// html: data-sizing="px" 
      
            document.documentElement.style.setProperty(`--${this.name}`, this.value + suffix);
           
        }
==========================================
==== Псевдоэлементы ======================
 ::before 
 ::after 
 ::first-letter
 ::selection		- ссылается на элементы, которые посетитель выбрал на странице. Например, когда
			  посетитель, нажав и удерживая кнопку мыши над текстом, перетаскивает указатель 
			  мыши, браузер выделяет этот текст и посетитель сможет скопировать выделенный
			  фрагмент.
			  ::-moz-selection	- только для Mozilla
===========================================
==== Позициирование и видимость елементов ================================================

==== display ==============================
 display:
	none;
	block;
	inline;
	inline-block;
	table-* 
	  table 		- table  
	  table-row		- для строки tr
	  table-header-group 	- thead 
	  table-row-group 	- tbody
	  table-footer-group 	- tfoot
	  table-column 		- col
	  table-column-group 	- colgroup
	  table-cell 		- для ячейки td, th  
	  table-caption 	- caption
	list-item	- по умолчанию используется для элементов списка.
			  Он добавляет к блоку содержимым ещё и блок с номером(значком) списка
			  <div style="display: list-item; list-style:inside square">Пункт 1</div>
	run-in		- Если после run-in идёт block, 
			  то run-in становится его первым инлайн-элементом,
			  то есть отображается в начале block.
	flex-box	- Flexbox позволяет удобно управлять дочерними и 
			  родительскими элементами на странице, 
			  располагая их в необходимом порядке.
	flex;

	grid;	[2]	- не вносит драматических изменений, 
			  однако дочерние элементы теперь стали грид-элементами.
		  	  Они расположились в одноколоночной полосе сетки, 
			  один под другим, сетка создала неявные строки для каждого элемента.
	box;
 ==== grid-верстка ========
 ---- ---- контейнер 
 display: grid;
 grid-template-columns: 1fr 1fr 1fr;	- добавление колонок;
					  1fr - 1 доля доступного пространства
 ---- ---- ---- по умолчанию
 grid-auto-flow: row
 grid-auto-rows: auto
 align-items:    stretch
 justify-items:  stretch
 grid-gap: 	 0


 ==========================

 ====  flexbox-верстка ====
 ---- ---- Контейнер 
 
 flex-flow:			- позволяет выбрать направление, 
				  а также указать, будут ли они переноситься на следующую строку.

 flex-direction: row;	----\_	flex-flow: row wrap;
 flex-wrap: wrap;	----/

 flex-flow: column-reverse nowrap;
 	    row 			— отображает flex-элементы последовательно, 
					  рядом друг с другом. 				 
					  значение по умолчанию.
	    row-reverse 		- 
	    column 			- отображает flex-элементы в виде блоков, друг над другом.
	    column-reverse 		—
			   nowrap; 	— Браузер будет отображать элементы в одной строке, 
					  независимо от того, насколько узким станет окно браузера
			   wrap; 	— позволяет объектам, 
					  которые не помещаются в контейнер по ширине,
					  переноситься на новую строку (или в колонку)	
			   wrap-reverse;— 
 ----

  justify-content:			- row: 	  выравнивание по ширине
					      	  column: выравнивание по высоте
		
		 : flex-start;		— по левому краю строки
		 : flex-end;		— по правому краю строки
		 : center;		— по центру контейнера	
		 : space-between;	— равномерно распределяет flex-элементы	
		 : space-around;	— равномерно распределяет оставшееся пространство между всеми
					  элементами, добавляя его также и по левому и правому краям
 					  крайних элементов
 ---- 

 align-items:				- определяет, выровненость по высоте строки 	
					 { выравнивает по ширине // flex-flow: column wrap; }

	    : flex-start;		— выравнивает верхний край всех flex-элементов
					  по верхнему краю контейнера
	    : flex-end;			— выравнивает нижний край всех flex-элементов 
					  по нижнему краю контейнера.
	    : center; 			— выравнивает вертикальный центр всех flex-элементов 
					  по вертикальному центру контейнера
	    : baseline; 		— выравнивает базовые линии всех flex-элементов 
					  по базовой линии первого элемента 
	    : stretch; 			— обычное поведение flex-элементов.
					  Растягивает каждый элемент по высоте контейнера, 
					  делая их высоты одинаковыми 
 ----

 align-content:				- Оно определяет, как браузер будет размещать flex-элементы,
					  занимающие несколько строк.
				Условия: 1. к flex-контейнеру должно быть применено значение wrap; 
					 2. flex-контейнер должен быть выше, чем строки flex-элементов. 

	    : flex-start;		— помещает строки flex-элементов у верхнего края flex-контейнера
	    : flex-end;			— помещает строки flex-элементов у нижнего края flex-контейнера
	    : center;			— выравнивает центры всех строк
					  по вертикальному центру контейнера
	    : space-between; 		— равномерно распределяет дополнительное пространство 
					  по вертикали между строками
	    : space-around;		— равномерно распределяет оставшееся пространство между всеми
					  строками, добавляя его также и по верхнему и нижнему краям
					  крайних строк
	    : stretch;		 	— обычное поведение строк flex-элементов. 
					  Значение растягивает каждый элемент в строке таким образом, 
					  чтобы он соответствовал высоте других элементов в строке. 
 
 ---- ---- Свойства flex-элементов

 order: 2;				- порядок следования (значение числа как в  z-index)
					  (-1 сдвигает в лево, если у левого ничего не указано)

 align-self:				-  работает аналогично свойству align-items
					   Отличие: align-item применяется ко всем элементам
					   в контейнере

 					   а align-self — к отдельным. 
					   Свойство, примененное к элементу (не контейнеру)


 flex-grow: 1;		- указывает на относительную ширину flex-элемента
 flex-shrink: 1; 	- определяет, насколько узким может быть flex-элемент
 flex-basis: 250px;	- определяет базовую ширину flex-элемента

 flex: grow shrink basis;		
	
 flex: 0 1 auto;	- по умолчанию
     : 1;   	== : 1 0 0%;
 -------
==================================================================================================
 position: static
	 : absolute	- Новое место вычисляется по координатам left/top/right/bottom 
			  относительно ближайшего позиционированного родителя.
			  Если такого родителя нет, то им считается окно.
			  Окружающие элементы заполняют освободившееся место.
	 : relative	- сдвигает элемент относительно его обычного положения
			  Окружающие элементы ведут себя так, как будто элемент не сдвигался
 	 : fixed
=================================================================================================
 float: left
	right 
	none
	inherit
 ----------------------------

 clear: left | right | both | none;

 .clearfix:after {
  content: "."; /* добавить содержимое: "." */
  display: block;  /* сделать блоком, т.к. inline не может иметь clear */
  clear: both;  /* с обеих сторон clear */
  visibility: hidden; /* сделать невидимым, зачем нам точка внизу? */
  height: 0;  /* сделать высоту 0, чтобы не занимал место */
}
 ----------------------------
 	При применении этого свойства происходит следующее:
 
 Элемент позиционируется как обычно, а затем вынимается из документа потока и сдвигается влево (для left) или вправо (для right) до того как коснётся либо границы родителя, либо другого элемента с float.
 
 Если пространства по горизонтали не хватает для того, чтобы вместить элемент, то он сдвигается вниз до тех пор, пока не начнёт помещаться.
 
 Другие непозиционированные блочные элементы без float ведут себя так, как будто элемента с float нет, так как он убран из потока..

 Строки (inline-элементы), напротив, «знают» о float и обтекают элемент по сторонам.

 Элемент при наличии float получает display:block.

 Исключением являются некоторые редкие display наподобие inline-table и run-in (см. Relationships between „display“, „position“, and „float“)

 Ширина float-блока определяется по содержимому. («CSS 2.1, 10.3.5»).

 Вертикальные отступы margin элементов с float не сливаются с отступами соседей, в отличие от обычных блочных элементов.
 ==== Сокрытие фрагментов ===========
 
 ----
 display: none;
 ---- 
 ---- visibility ----

 visibility: hidden;	- предотвращает отображение браузером содержимого элемента, 
			  но оставляет пустое пространство в той позиции, 
			  где должен был быть элемент.
	   : visible;

 ---- opacity ----

 opacity: 0;	- прозрачный;
	: 1;	- непрозрачный;
==================================================================================================
==== Форматирование текста =======================================================================

 user-select:		Управляет поведением выделения текста и других элементов на странице,
					в частности, позволяет запретить выделение текста. 
					Обычно применяется для интерактивных элементов, на которые можно щёлкать, 
					например, вкладки, и для которых выделение текста нежелательно.

	:auto		- Для редактируемых элементов значение принимается contain. 
				  Если у родителя значение user-select установлено как all, то для элемента оно тоже будет all. 
				  Если у родителя значение user-select установлено как none, то для элемента оно тоже будет none. 
				  Во всех остальных случаях принимается значение text.
	:none		- Пользователю запрещено выделять элемент.
	:text		- Пользователь может выделить текст в элементе.
	:all		- Позволяет выделить текст внутри элемента, включая дочерние элементы.
	:contain	- Позволяет выделять текст, но только внутри границ элемента.
--------------------------------------------------------------------------------------------------
 text-decoration: overline	- верхнее подчеркивание
		: underline	- подчеркивание
 		: line-through	- перечеркивание
 		: blink		- мигание
--------------------------------------------------------------------------------------------------
 text-align: justify
	   : left
	   : right
	   : center
--------------------------------------------------------------------------------------------------
 text-transform: uppercase	- преобразование всех букв в заглавные
	       : none 
	       : capitalize	- преобразование первых букв слов в заглавные
               : lowercase 	- преобразование всех букв в строчные

		: full-width	- (только firefox)
--------------------------------------------------------------------------------------------------
 text-indent: 20px		- отступ первой строки блока текста
--------------------------------------------------------------------------------------------------
 letter-spacing:		- Интервал между символами 
   word-spacing:		- Интервал между словами
		: -1px
		: 1em
		: normal

--------------------------------------------------------------------------------------------------
 vertical-align:	
		baseline
		middle
		top
		bottom
--------------------------------------------------------------------------------------------------
 --- white-space: 		- позволяет сохранять пробелы и переносы строк.
		: normal	– обычное поведение

		: pre 		– текст ведёт себя, как будто оформлен в тег pre.
				  Сохраняет пробелы.
				  Переносит текст при явном разрыве строки.	
		: nowrap	- Не сохраняет пробелы.
				  Игнорирует явные разрывы строки (не переносит текст).

		: pre-wrap	- То же самое, что pre, 
				  но переводит строку, если текст вылезает из контейнера.
		: pre-line	- То же самое, что pre, но переводит строку, если текст вылезает из контейнера 
				  и не сохраняет пробелы.

 tab-size: 4;			- управление размером таба в пробелах

 text-shadow:3px 3px 4px #444;

 text-overflow: ellipsis;	- добавление многоточия [3:120]

 word-wrap:	break-word;	- перенос длинных строк
 overflow-wrap: break-word;
 hyphens:	auto;		- проставлять дефисы при переносе
		:none;
		:manual;	- вывести дефисы на разрывах строки там,
				  где вы поставили их в разметке. 
--------------------------------------------------------------------------------------------------
---- Списки --------------------------------------------------------------------------------------
 ul	- маркированные списки

 list-style-type: disc;				- сплошной кружок
		: circle;			- полый кружок
		: square 			- сплошной квадрат

 ol	- нумерованные списки

 list-style-type: decimal;     decimal-leading-zero;
		  upper-alpha; lower-alpha; 
		  upper-roman; lower-roman;

 list-style-position: outside;			- Позиционирование маркеров
		    : inside;

 list-style-image: url(images/bullet.gif);	- Графические маркеры

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 list-style: circle url(images/bullet.gif) inside;
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 I. генерирует красные кружочки перед списком
 ul li {
	list-style-type: none;
 }
 ul li:before {
	content: counter(item, disc) " ";
	color: red;
 }
 
 II. красным цветом отформатировать числа нумерованного списка:
 ol li {
	list-style-type: none;
	counter-increment: item;
 }
 ol li:before {
	content: counter(item) ". ";
	color: red;
 }


--------------------------------------------------------------------------------------------------
 ===== Шрифт - font: italic bold 20px/1.5 Arial,sans-serif; =================================================


 font-style: normal
 	   : italic
	   : oblique
 -----------
 font-weight: bold; (400)		- 100..900
 -----------F
 font-size  : 20 px			– размер шрифта, в частности, определяющий высоту букв.
 line-height: 				– высота строки.
	    : line-height:normal	- в диапазоне 1.1 - 1.25, но стандарт не гарантирует этого, 
					  он говорит лишь, что оно должно быть «разумным»
	    : 2				- 2 означает, что высота строки будет равна удвоенному размеру шрифта,
					  не важно какой шрифт.
	

 --- font-family:
 ---- ---- Антиквенные шрифты (с засечками) [serif]:
	"Times New Roman", Times, serif;
	 Georgia, "Times New Roman", Times, serif;
	 Baskerville, "Palatino Linotype", Times, serif;
	 "Hoefler Text", Garamond, Times, serif;

 ---- ---- Рубленые шрифты (без засечек) [sans-serif]:
	Arial, Helvetica, sans-serif;
	Verdana, Arial, Helvetica, sans-serif;
	Geneva, Arial, Helvetica, sans-serif;
	Tahoma, "Lucida Grande", Arial, sans-serif;
	"Trebuchet MS", Arial, Helvetica, sans-serif;
	"Century Gothic", "Gill Sans", Arial, sans-serif;

 ---- ---- Моноширинные [monospace]:
	"Courier New", Courier, monospace;
	"Lucida Console", Monaco, monospace;

 ---- ---- декоративные:
	"Copperplate Light", "Copperplate Gothic Light", serif;
	"Marker Felt", "Comic Sans MS", fantasy;

------------------

 ---- Типы файлов шрифтов:

 EOT					-> IE
 .ttf (True Type), .otf (Open Type)
 WOFF				-> IE9++, Firefox, Chrome, Safari, Opera, iOS, Blackberry и Android4.4++
 SVG				-> Safari
-------------------------------
 @font-face {
	font-family:FontName;
	src:url('FontName.otf');
 }
 @font-face {
	font-family:FontName;
	src:url('FontName.otf') format('opentype');
 }
 @font-face {
	font-family: 'PTSans';
	src: url('fonts/PTSansBold.woff2') format('woff2'),
	url('fonts/PTSansBold.woff') format('woff');
	font-weight: bold;
	font-style: normal;
 }

 ==== best praktic ====
 @import url(http://fonts.googleapis.com/css?family=Rye:100,300,700|Satisfy); 	// импорт из google fonts
 body { font-family: 'Rye', cursive;  font-size: 100px; }
 ======================
=================================================================================================
=================================================================================================
 box-sizing: border-box		- размеры, относящиеся ко всему элементу, 
				  включая любые отступы и границы
	   : content-box	- ширина и высота объекта относились только к содержимому (умолч)
	   : padding-box 	- до width = 100, pL = pR = padding = 20; -> 
				  после всего = 100, w=60 (100 — 20 [pL] — 20 [pR]); pL = pR = 20;

================================================================================================ 

 border-width: 2px;
 border-style: solid; dashed; dotted; double; groove; inset; outset; ridge; none
 border-color: #FFCC33;
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 border:3px solid blue; 	
 outline: 3px solid red;	- задаёт дополнительную рамку вокруг элемента, за пределами его CSS-блока. 
				  не участвует в блочной модели CSS. 
				  Она не занимает места и не меняет размер элемента.
				  используют, когда хотят добавить рамку без изменения других CSS-параметров.
				  Так как outline находится за границами элемента –
					 outline-рамки соседей могут перекрывать друг друга

 outline-offset: 50px		- задащёт отступ outline от внешней границы элемента:




 ---- Фон: background-

 // должен ли фон игнорироваться (усекаться)	[1:273]
 background-clip: border-box	- относится к внешнему краю границы
		: padding-box 	- относится к внешнему краю области отступа
		: content-box	- относится к внешнему краю области содержимого

 // где должно располагаться фоновое изображение, определив для этого, 
 // где будет начинаться левый верхний угол данного изображения	[1:273]
 background-origin: border-box		- в верхний левый угол области границы
		  : padding-box 	- в верхний левый угол области отступа
		  : content-box		- в левый верхний угол области содержимого 

 background-size: wwpx hhpx;	[auto]
		: contain;		- рисунок увеличивается, что-бы поместиться либо по W, либо по H
		: cover 		- соотнося высоту/ширину элемента и изображения, не искажая пропорции


 background-repeat: repeat; no-repeat; repeat-x;  repeat-y; 
		  : round; 	— мозаично повторяет фоновое изображение, но никогда не обрезает его; 
				  Изображения масштабируются;
		  : space; 	— мозаично повторяет фоновое изображение, но предотвращает искажение и
				  обрезание изображений вверху или внизу.
				  Всегда отображает изображение без искажений. 
 
 background-attachment: fixed; 	- фон всегда оставался в пределах видимости во время просмотра.
		      : scroll;

 background:	url('b1.gif') top	left	no-repeat,
		url('b2.gif') top	right	no-repeat,
		url('b3.gif') bottom	left	no-repeat,
		url('b4.gif') bottom	right	no-repeat,
		url('ba.gif') top		repeat-x,
		url('bb.gif') left		repeat-y,
		url('bc.gif') right		repeat-y,
		url('bd.gif') bottom		repeat-x

 ---- ---- Градиенты

 background-image: linear-gradient(to right, black, white);			to top, 0deg, ...
 background-image: linear-gradient(to right, #900, #FC0 10%, #FC0 90%, #900);

 ~~~~~~~~
 background-image:
		  linear-gradient(cyan, transparent),
		  linear-gradient(225deg, magenta, transparent),
		  linear-gradient(45deg, yellow, transparent);
 ~~~~~~~~
 background-image: repeating-linear-gradient(45deg, #900 20px, #FC0 30px, #900 40px)
 
 background-image: radial-gradient(red, blue);
 background-image: radial-gradient(circle, red, blue);		ellipse
 background-image: radial-gradient(circle at 20% 40%, red, blue);
 background-image: radial-gradient(closest-side circle at 20% 40%, red, blue);
 	closest-side 	— из центра только до ближайшей к центру стороне элемента
	closest-corner 	— из центра до ближайшего угла элемента
	farthest-side	— от середины до самой дальней стороны элемента
	farthest-corner — от центра до самого дальнего угла элемента

 background-image: radial-gradient(circle at 20% 40%, red 20%, orange 80%, yellow);

 background-image: repeating-radial-gradient(circle, red 20px, orange 30px, yellow 40px, red 50px);

 ---- ---- режим наложения

 background-blend-mode: screen;
			color;
			...
 background-blend-mode: color, screen, screen;

 ---- ---- ---- наложкние изображения на белом фоне
 { mix-blend-mode: multiply;
   opacity: 70%;
 }

 mix-blend-mode: screen;	- нескольких изображенй	
		color-dodge;	- ?

 isolation: isolate;		- для предотвращения смешивания нижнего слоя с остальными

 ---- ---- Спрайты 
 I.	<div> спрайт </div>	<div> text </div>	

	width: 16px;
	height: 16px;
	float: left;
	background: url(icons.gif) no-repeat;
	background-position: 0 -16px;

 II.	width: 35px; /* ширина/высота больше чем размер иконки */ /* с отступом */
	height: 35px;
  	border: 1px solid black;
  	float: left;
  	background-image: url(sprite.png);
	background-position: -90px -40px;
 ---- ----- 



 border-color:#f00 #0f0 #880 #00f;
 
 border-radius:40px 40px 20px 20px;

 box-shadow:15px 15px 10px #888;

 // Выход элемента за пределы размеров
 overflow: 
	visible (по умолчанию)
	hidden
	scroll
	auto

 overflow-x:hidden;
 overflow-x:visible;
 overflow-y:auto;
 overflow-y:scroll;

 // колонки // -moz- -webkit- 
 column-count: 	3;
 column-gap: 	1em;
 column-rule:	1px solid black;
==========================================================================================================
==== изображения ====

 filter:								- для применения художественных эффектов к элементам
	: url(resources.svg);				//
	: blur(5px);						// размытие
	: brightness(0.4);					// яркость
	: contrast(200%);					// контраст
	: drop-shadow(16px 16px 20px blue);	// тень	
	: grayscale(50%);					// оттенки серого
	: hue-rotate(90deg);				// изменение оттенка
	: invert(75%);						// инвертирование
	: opacity(25%);						// непрозрачность
	: saturate(30%);					// насыщенность
	: sepia(60%);						// сепия

  /* Применение нескольких фильтров */
  filter: contrast(175%) brightness(3%);	

=====================
==== Таблицы =============================================================================================
 
 border-spacing: 0;		- Управление промежутками между ячейками таблицы

 border-collapse: collapse; 	- схлопывает границы таблицы, позволяя избавиться от интервалов
				  и удвоения границ
				  border-spacing  -| работать не будет.
				  border-radius	   |
		:separate;	- по умолчанию
================================================================================================
==== Колонки [-webkit-]=============================================================

 column-count: 3;		- количество колонок
 column-gap: 1em;		- промежутки меджу ними 
 column-rule: 1px dotted black;	- для отображения линий между колонками 

================================================================================================
==== Формы ======================================================================================
 https://www.sanwebe.com/2014/08/css-html-forms-designs

input:required { background-color: lightyellow;	}

 :focus 	- позволяет создать селектор, изменяющий внешний вид текстового поля при щелчке на нем 
 :checked 	- поддерживается переключателями и флажками
 :enabled	-| Изменить состояние элемента веб-формы можно только с помощью JavaScript-сценария
 :disabled  	 |


 :required 	| - применяют форматирование к полю в зависимостиот того, 
 :optional 	|   использует ли это поле атрибут required или нет
 
 :valid		| - применяют форматирование к полю в зависимости от
 :invalid	|   правильности введенного в него значения

 :in-range 	| - применяющие форматирование к полям, для которых используется 
 :out-of-range	|   атрибут min или max , чтобы ограничить их значение определенным
		|   диапазоном значений

 ---- стилизация placeholder

 .my::-webkit-input-placeholder { color: red; }
 .my::-moz-input-placeholder 	{ color: red; }
 .my::-ms-input-placeholder 	{ color: red; }
 

================================================================================================
===== Анимация ===========================================================================================
 
 ---- will-change 	- позволяет автору проинформировать браузер о том, какие изменения будут применены к элементу.\
					  Это позволяет браузеру заранее произвести необходимую отптимизацию, 
					  выполнив потенциально тяжелые подготовительные операции до начала анимации.
/* Keyword values */
	: auto;
	: scroll-position;
	: contents;
	: transform;        /* Example of <custom-ident> */
	: opacity;          /* Example of <custom-ident> */
	: left, top;        /* Example of two <animateable-feature> */

/* Global values */
	: inherit;
	: initial;
	: unset;

 ==== Трансформации

 transform:none; 
	  :matrix  		— трансформирует объект, применяя к нему матрицу значений;
	  :translate(1px, 4px)	— перемещает исходную точку элемента; translateX(); translateY();
	  :scale(1.5)  		— масштабирует объект; scaleX(); scaleY();
 	  :rotate(45deg)	— вращает объект;
	  :skew(45deg, 0)	— наклоняет объект
	  transform:scale(1.5, 2) rotate(45deg);

 ==== Трехмерная трансформация 

 perspective  	— освобождение элемента из двумерного пространства и создание
				  третьего измерения, в котором он может перемещаться;

 transform-origin: left top;	— установка места, где все линии сходятся в одну точку; Точка преобразования

 translate3d  		— перемещение элемента в другое место трехмерного пространства;
 scale3d  			— изменение масштаба одного или нескольких измерений;
 rotate3d  			— вращение элемента вокруг любой из осей X, Y и Z.
 transform: perspective(200px) rotateX(10deg) rotateY(20deg) rotateZ(30deg);

 ==== Переходы
 transition-property: 		- Список свойств, которые будут анимироваться
 transition-duration: 		- Продолжительность, задаётся в секундах s или ms.
 transition-timing-function:	- Временнáя функция
			     	  ease, linear, ease-in, ease-out, ease-in-out
				  cubic-bezier(0, 0, 1, 1) 	- линейно
 transition-delay:		- Задержка до анимации;


 transition-property: width, height, opacity;
 
 transition: width, height, 3s linear 1s;
 transition:all .3s linear .2s;

 ==== Анимация  
 ---- @keyframe
 
 @keyframes go-left-right {   		/* назовём анимацию: "go-left-right" */
    from {
      	  left: 0px;         		/* от: left: 0px */
    }
    20%, 60% { ... }
    50% {
	  ... ;
	  ... ; 
    }	

    to {
      	  left: calc(100% - 50px);	/* до: left: 100%-50px */
    }

  }

  @-webkit-keyframes go-left-right {	/* Префикс для Chrome, Opera, Safari */
    from { left: 0px;  }
    to { left: calc(100% - 50px);  }
  }

 ---- animation 
 
 animation-name: go-left-right;  	- применить анимацию go-left-right из @keyframes;
					  можно указать через запятую несколько.
 ---- ---- Тайминг анимации
 animation-duration: 3s;	  	- продолжительность
 animation-timing-function: ease-out;
 animation-delay: 1s;			- задержка
 
 ---- Завершение анимации
 animation-iteration-count: infinite;	- количество раз: бесконечное (infinite)
 animation-direction: alternate;	- Чтобы анимация при нечетных воспроизведениях шла в прямом порядке,
					  а при четных — в обратном
 Чтобы анимация воспроизводилась несколько раз,
 но в конечном итоге возвращала элементу его первоначальный вид,
 используйте четное количество итераций и присвойте свойству animation-direction значение alternate.

 animation-fill-mode: forwards;		- можно сохранить элементу тот вид, 
					  который был у него по завершении анимации

 ---- ---- Приостановка анимации
 animation-play-state: paused;		- приостановка анимации
		     : running;

	.fade:hover {
		animation-play-state: paused;
	}

 	-webkit-animation-play-state
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 animation: animation-name
	    animation-duration
	    animation-timing-function
	    animation-iteration-count
	    animation-direction
	    animation-delay
	    animation-fill-mode	;

 animation: animation1 , animation2 ;	- через "," несколько анимаций
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  .progress {
    /* применить анимацию go-left-right 			*/
    /* продолжительность 3s 					*/
    /* количество раз: бесконечное (infinite)			*/
    /* менять направление анимации каждый раз (alternate)	*/

    -webkit-animation: go-left-right 3s infinite alternate;
	    animation: go-left-right 3s infinite alternate;
   
  }



 	 

==================================================================================================

==== Центирование =========================================================================
 ---- Горизонтальное
 	text-align: center;
	------------------
	margin-left:auto
 	margin-right:auto

 --- Вертикальное
 Если размер центрируемого элемента известен, а родителя – нет
    Родителю 	position:relative;
    потомку	position:absolute;
 		top: 50%;
		margin-top: -0.625em;	// приподнимаем элемент на пол высоты; 0,625em - высота пол строки
 --------------------------------------
 Если нужно отцентрировать одну строку в блоке, высота которого известна
	Поставить блоку line-height: <высота>. Нужны конкретные единицы высоты (px,em…). 
	Значение line-height:100% не будет работать, т.к. проценты берутся не от высоты блока, а от текущей line-height.
 --------------------------------------
 Высота родителя известна, а центрируемого элемента – нет.
	Поставить line-height родителю во всю его высоту, а потомку поставить display:inline-block.
 ----------------------------------------
 Высота обоих элементов неизвестна.
 I. Сделать элемент-родитель ячейкой таблицы
	display: table-cell;
	vertical-align: middle;
 II. Решение с вспомогательным элементом outer:before и инлайн-блоками.
     Вполне универсально и не создаёт таблицу.
	.outer:before {
		content: '';
		display: inline-block;
		height: 100%;
		vertical-align: middle;
	}
	.inner {
		display: inline-block;
		vertical-align: middle;
		margin-left: -0.35em;
	}
	.outer {
		text-align: center;
	}
	---- HTML
	<div class="outer">
		<span class="inner"> Центрированный<br>Элемент	</span>
	</div>
=================================================================================================
==== Адаптив ====================================================================================

 ---- медиазапросы
 
 ---- ---- @import -  добавления медиазапросов в таблицу стилей
	1. Создать отдельный сss файл только с @import
 @import url(css/base.css);		   /* без медиазапроса, для всех */
 @import url(css/medium.css) (min-width:481px) and (max-width:768);
 @import url(css/small.css) (max-width: 480px);
	 
 ---- ---- @media
@media (scripting: none) {...}		/* стили, предназначенные для применения в отсутствие JavaScript */
@media (scripting: enabled) {}		/* стили, предназначенные для применения при наличии JavaScript */
@media (scripting: initial-only) {}	/* стили для страницы, применяющей JavaScript только при ее начальном выводе */

@media (pointer: coarse) {}			/* стили на случай присутствия указателя, имеющего состояние coarse */
@media (hover: none) {}				/* стили для тех случаев, когда провести указатель над элементами невозможно */



 @media (max-width: 480px) {				}	- мобилы
 @media (min-width: 481px) and (max-width: 768px) {	}	- планшеты
 @media (min-width: 769px) {				}	- компы



 1: Приоритет компьютеры
	/* Сброс стилей браузера */

	/* стили для компьютеров и базовые стили для всех устройств */
	body {	/* свойства тела страницы */			}

	/* только для устройств со средним размером экрана */
	@media (min-width: 481px) and (max-width:768px) {
		body {	/* только для планшетов */		}
	}

	/* только для устройств с малым размером экрана */
	@media (max-width:480px) {	
		body {	/* только для смартфонов */		}
	}
2: приоритет мобильники
	/* сброс стилей браузера */

	/* стили для мобильных устройств и базовые стили для всех устройств */
	body {	/* свойства тела страницы */			}

	/* только для устройств со средним размером экрана */
	@media (min-width: 481px) and (max-width:768px) {
		body {	/* только для планшетов */		}
	}

	/* только для устройств с крупным размером экрана */
	@media (min-width:769px) {
		body {	/* только для компьютеров */		}
	}

==== Гибкиq дизайн ===============================================================================
 ----
 результат = цель / контекст 
 ---- создание колонок
html:
	<div class="columns">
		<div class="one-third">		...контент...	</div>
		<div class="two-thirds">	...контент...	</div>
	</div>
css:
	.columns {
		width: auto; /* same as 100% */
		max-width: 1200px;
	}
	.columns:after {
		content: "";
		display: table;
		clear: both;
	}
	.one-third {
		float: left;
		width: 33%;
	}
	.two-thirds {
		float: left;
		width: 67%;
	}


==== CSS Общие советы ===========================================================================

 ---- Организация стилей ----

 base.css
 	@import url(main.css);
 	@import url(layout.css);
 	@import url(color.css);
 	@import url(forms.css);
 ----------------------------

 ---- Борьба с кэшем --------
 
 Обновить ссылку в HTML -> ?v=1 
  <link rel="stylesheet" href="main.css?v=1">
 ----------------------------
=================================================================================================
==== Адаптив ====================================================================================
 <link rel="..." media="screen" 			    href=".css">
 
 media="screen"
 media="screen 		and (orientation: portrait)" 
 media="not screen 	and (orientation: portrait)" 
 media="screen 		and (orientation: portrait) 	and (min-width: 800px)"
 media="screen 		and (orientation: portrait) 	and (min-width: 800px), projection"

 
 @import url("phone.css") screen and (max-width:360px);

 width, 	height,  	orientation, 

 device-width: 	— ширина поверхности отображения (для нас это, как правило, ширина экрана устройства);
 device-height: — высота поверхности отображения (для нас это, как правило, высота экрана устройства);
 aspect-ratio: 	— соотношение ширины к высоте на основе ширины и высоты окна просмотра. 
				  Дисплей с соотношением сторон 16:9 может быть описан как aspect-ratio: 16/9;
 device-aspect-ratio: — на ширине и высоте не окна просмотра, а поверхности отображения устройства;
 color: 		— количество битов, приходящееся на каждую составляющую цвета. 
				  min-color: 16 задаст проверку того, обладает ли устройство цветом с глубиной 16 бит;
 color-index: 	— количество записей в таблице поиска цветов устройства. 
				  Значения должны быть числовыми и не могут быть отрицательными;
 monochrome: 	— возможность проверки количества битов на пиксел в буфере монохромного кадра. 
				  Значение должно быть целым числом, например monochrome: 2, и не может быть отрицательным;
 resolution: 	— эта возможность может использоваться для проверки разрешения экрана или принтера, 
				  например min-resolution: 300dpi. 
				  Может также приниматься единица измерения в точках на сантиметр, например min-resolution: 118dpcm;
 scan: 			— это свойство может отображать значение развертки (прогрессивной или чересстрочной), 
				  которое имеет отношение в основном к телевизионным устройствам.
				  Например, нацеливание на устройство с параметрами 720p HD TV 
				  (буква «p» в 720p означает progressive — «прогрессивная») scan: progressive, 
				  a 1080i HD TV (буква «i» в 1080i означает interlaced — «чересстрочная») — с помощью выражения scan: interlace;
 grid: 			— эта возможность показывает, на какой основе построено устройство, сеточной или растровой.



=================================================================================================
=================================================================================================

==== Список литературы: 

 1: Верстка. 1. Девид Макфарланд - Новая большая книга CSS(Бестселлеры O'Reilly) - 2016.pdf
 2: http://prgssr.ru/development/grid-fleksboks-i-vyravnivanie-blokov-nasha-novaya-sistema-raskladki.html
 3: Б.Фрейн - HTML5 и CSS3
