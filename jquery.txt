==== Обертка ================================================================

 window.onload = function() {	...	};	
 jQuery(document).ready(function() { ... });		| jQuery == $
 jQuery(function() { 	... 	});		
 $(function() { 	... 	});			- best	

==== Выборка ===================================================================

-------	Селекторы ----------- http://docs.jquery.com/Selectors

 $("p:even")		- Отбирает все четные элементы <p>
 $("tr:nth-child(1)")	- Отбирает первые строки во всех таблицах
 $("body > div")	- Отбирает элементы <div>, являющиеся прямыми потомками элемента <body>
 $("a[href$=pdf]")	- Отбирает ссылки на файлы PDF
 $("body > div:has(a)")	- Отбирает элементы <div>, которые являются прямыми потомками 
			  элемента <body> и содержат ссылки

 ---- Поиск по иерархии

 $("*")			   // выбор всех элементов
 a#id.class		- ссылки с id=id и class=class
 p a.class		- ссылки с class=class внутри <p>
 p > a 			- селектор потомков, отбирает ссылкиб кот. явл. прямыми потомками <p>

 $("article > *")	  // выбор всех потомков элементов article
 $("article").children()  //

 p + a 			- a, который непосредственно идет после <p> на томже уровне вложенности
 p ~ a 			- a, который идет после <p> на томже уровне вложенности

 
 $("#stick").prev() 	// выбор предыдущего элемента от найденного
 $("#stick").next() 	// выбор следующего элемента от найденного

 $("p").parent()	// выбор всех прямых предков элементов p
 $("p").parents()	// выбор всех предков элементов p (не понадобится)
 $("p").parents("div") 	// выбор всех предков элемента p которые есть div
		  	// parents принимает в качестве параметра селектор

 ---- Поиск по атрибутам


 a[href^=http://]	- href который начинается с http://
 a[href$='.pdf'] 	-              заканчивается
 a[href*='iquery']	- 	       содержит
 form[method]		- любой элемент form, в котором явно определе атрибут method
 input[type=text]	- все input с type=text
 
 a[hreflang|=en] 	— все ссылки, для которых hreflang начинается с	
			  «en» и обрезается по символу «-» — «en», «en-US», «en-UK»

 --- выбор селекторов по позиции || псевдокласы || фильтры [66]
 a:first
 a:odd			- нечетный
 a:even			- четный 
 ul li:last-child
	:last
	:first-child
	:only-child	- Выберет все элементы, являющиеся единственными
			  дочерними элементами.
	:nth-child(n|even|odd)
	:nth-child(Xn+Y)
	:eq(n)		- n-й элемент
	:gt(n)		- Выберет элементы, расположенные за n-м элементом (невключая его)
	:lt(n)		- Выберет элементы, расположенные перед
			  n-м элементом(не включая его)


 --- нестандартные селекторы-фильтры jQuery [1:69]

 
 :checked		- Выбирает только отмеченные флажки или радиокнопки

 :radio			- Выбирает только радиокнопки 
			  input[type=radio]

 :checkbox		- Выбирает только элементы-флажки
			  input[type=checkbox]

 :animated		- Выбирает элементы, в настоящий момент управляемые механизмом
			  воспроизведения анимационных эффектов

 :button		- Выбирает все кнопки 
			  input[type=submit]
			  input[type=reset]
			  input[type=button] или button

 :contains(foo) 	- Выбирает только элементы, содержащие текст foo

 :disabled		- Выбирает только элементы форм, 
			  находящиеся в неактивном состоянии
			  (поддерживается средствами CSS)

 :enabled		- Выбирает только элементы форм, находящиеся в активном состоянии

 :file			- Выбирает все элементы типа file 
			  input[type=file]

 :has(selector)		- Выбирает элементы, содержащие хотя бы один элемент,
			  соответствующий указанному селектору
			  ('div:has(span)') 

 :header		- Выбирает только элементы, являющиеся заголовками, 
			  например элементы от <h1> до <h6>

 :hidden		- Выбирает только скрытые элементы

 :image			- Выбирает изображения в формах 
		  	  input[type=image]

 :input			- Выбирает только элементы форм 
		 	  input, select, text­area, button

 :not(selector)		- Инвертирует значение указанного селектора selector
			  ('img:not([src*="dog"])')

 :parent		- Выбирает только элементы, у которых имеются вложенные (дочерние)
			  элементы (включая простой текст), но не выбирает пустые элементы
	
 :password		- Выбирает только элементы ввода пароля
			  input[type=password]

 :reset			- Выбирает только кнопки сброса 
			  input[type=reset]
			  button[type=reset]

 :selected		- Выбирает элементы <option>, которые были выделены

 :submit		- Выбирает кнопки отправки формы 
			  button[type=submit]
			  input[type=submit]

 :text			- Выбирает только элементы ввода текста
			  input[type=text]

 :visible		- Выбирает только видимые элементы

 Эти селекторыфильтры также можно комбинировать друг с другом. 
 Например, выбрать только активные и отмеченные флажки можно было бы так:
	:checkbox:checked:enabled

 .map(callback)		// создает новый набор в результате работы цикла
 .each(iterator)	// возвращает исходный набор

 ----  Получение обернутого набора с учетом взаимоотношений
 .children([selector])	=> обернутый набор, содержащий уникальные дочерние элементы обернутых элементов.
 .closest([selector])	=> обернутый набор, содержащий единственный элемент ближайшего предка, 
						   соответствующий указанному селектору.
 .contents()			=> обернутый набор содержимого элементов обернутого набора, 
						   куда могут входить текстовые узлы. 
						   (Часто используется, чтобы получить содержимое элементов <iframe>.)
 .next([selector])		=> обернутый набор, состоящий из уникальных соседних элементов, 
						   следующих в дереве DOM за элементами первоначального обернутого набора.
 .nextAll([selector])	=> обернутый набор, содержащий все соседние элементы, следующие в дереве DOM
						   за элементами первоначального обернутого набора.
 .nextUntil([selector]) => обернутый набор, содержащий все соседние элементы, следующие в дереве DOM 
						   за элементами первоначального обернутого набора, 
						   вплоть до элемента (но не включая его), соответствующего селектору. 
						   Если совпадений с селектором не будет обнаружено или если селектор опущен, 
						   отбираются все последующие соседние элементы.
 .offsetParent()		=> обернутый набор, содержащий родительский элемент с абсолютным или относительным
						   позиционированием, ближайший к первому элементу в обернутом наборе.
 .parent([selector])	=> обернутый набор, 
						   куда включаются уникальные прямые предки всех элементов в обернутом наборе.
 .parents([selector])	=> обернутый набор, содержащий уникальные родительские элементы всех обернутых элементов. 
						   В их число входят прямые предки, а также все остальные родительские элементы,
						   за исключением корневого элемента документа.

 .parentsUntil([selector]) => обернутый набор, содержащий все родительские элементы всех обернутых элементов,
							  вплоть до элемента (но не включая его), соответствующего селектору. 
							  Если совпадений с селектором не будет обнаружено или если селектор опущен,
							  отбираются все родительские элементы.

 .prev([selector])		=> обернутый набор, состоящий из уникальных соседних элементов, 
						   предшествующих в дереве DOM элементам первоначального обернутого набора.

 .prevAll([selector]) 	=> обернутый набор, содержащий все соседние элементы, 
						   предшествующие в дереве DOM элементам первоначального обернутого набора.

 .prevUntil([selector])	=> обернутый набор, содержащий все соседние элементы, 
						   предшествующие в дереве DOM элементам первоначального обернутого набора, 
						   вплоть до элемента (но не включая его), соответствующего селектору. 
						   Если совпадений с селектором не будет обнаружено или если селектор опущен, 
						   отбираются все предшествующие соседние элементы.
 .siblings([selector])	=> Возвращает обернутый набор, содержащий уникальные соседние элементы, 
						   находящиеся на одном уровне вложенности с элементами первоначального обернутого набора.
 ---- 
 .find(selector)		=> Вновь созданный обернутый набор элементов
 .is(selector)			=> true, false 

 ==== цепочка ====
 .end()		- выполняет откат к предыдущему обернутому набору и возвращает его
 .andSelf() - Объединяет два предыдущих обернутых набора в цепочках метод ов .

------------------------------------------------------

 ==== CSS ====
 .css("font-size")						- чтение стиля

 .css('font-size', '200%')					-| добавление 
 .css({	cursor: 'pointer',					 | стиля
	border: '1px solid black',				 |
	})							 |
 .addClass(className) 						— добавление класса элементу
 .addClass(function(index, currentClass){ return className }) 	— добавление класса используя функцию
								  обратного вызова
 .hasClass(className) 						— проверка на причастность к определённому классу
 .removeClass(className) 					— удаление класса 
 .removeClass(function(index, currentClass){ return className })— удаление класса используя функцию 
								  обратного вызова
 .toggleClass(className) 					— переключение класса
 .toggleClass(className, switch) 				— переключение класса по флагу switch
 .toggleClass(function(index, currentClass, switch){ return	—| переключение класса используя
		className }, switch)				 | функцию обратного вызова

 ==== Атрибуты ====
 .attr(attrName) 			— получение значения атрибута
 .attr(attrName, attrValue)		— установка значения атрибута
					  (также можно использовать hash, либо функцию обратного вызова)
 .removeAttr(attrName) 			— удаление атрибута

	// работаем со ссылками
	$('a#my').attr({
			'href':'http://anton.shevchuk.name',
			'title':'My Personal Blog',
	});
 
 ---- Свойства ----
 .prop(propName) 			— получение значения свойства
 .prop(propName, propValue)		— установка значения свойства 
					  (также можно использовать hash, либо функцию обратного вызова)
 .removeProp(propName)			— удаление свойства (скорей всего никогда не понадобится)

 ==== События ====
 change		— изменение значения элемента (значение, при потери фокуса, 
		  элемента отличается от изначального, при получении фокуса)
 click		— клик по элементу 
		  (порядок событий: «mousedown» → «mouseup» → «click»)
 dblclick
 resize		— изменение размеров элементов
 scroll
 ---- формы ----
 select		— выбор текста для «input[type=text]» и «textarea»
 submit		— отправка формы
 focus		— фокус на элементе, актуально для «input[type=text]», но
		  в современных браузерах работает и с другими элементами
 blur		— фокус ушёл с элемента, актуально только для элементов «input[type=text]»
		  срабатывает при клике
 ---------------
		  по другому элементу на странице или по событию клавиатуры 
		  (к примеру переключение по tab'у)
 focusin	— фокус на элементе, данное событие срабатывает на
		  предке элемента, для которого произошло событие «focus»
 focusout	— фокус ушёл с элемента, данное событие срабатывает на
		  предке элемента, для которого произошло событие «blur»
 keydown
 keypress
 keyup
 mousedown
 mouseup
 mousemove
 mouseenter	— наведение курсора на элемент, не срабатывает при переходе фокуса на дочерние элементы
 mouseleave	— вывод курсора из элемента, не срабатывает при переходе фокуса на дочерние элементы
 mouseover	— наведение курсора на элемент
 mouseout	— вывод курсора из элемента
 -- touch -- 
 touchstart 	— событие схоже с «mousedown», происходит при касании пальцем экрана
 touchend 	— убираем палец с экрана, ака «mouseup»
 touchmove 	— водим пальцем по экрану — «mousemove»
 touchcancel 	— странное событие, отмена «touch» до того, как палец был убран
 -----------
	//
	$("#menu li a").click()
		
	// или используя метод trigger
	$("#menu li a").trigger("click")
	
 .preventDefault();	- отменяет действие по-умолчанию
 .stopPropagation();	- останавливает всплытие событий

	//
	$("#menu li a").click(function(event){
		alert("Hello!");
		event.preventDefault();
		event.stopPropagation();
	})
	// быстрый способ вызова этих двух методов за раз
	$("#menu li a").click(function(event){
		return false; 
	})

 .stopImmediatePropagation();
	//
 	$("#menu li a").click(function(event){
		alert("Hello!");
		event.stopImmediatePropagation();
		return false;
	})
		$("#menu li a").click(function(event){
		alert("Hello again!");
		return false;
	})


 .off();		- удаляем все обработчики
	//
	$('.class').off();

 |	// когда нам необходимо отключить не всеобработчики
 |
 |	// создаём обработчик
 |	$('.class').on('click.namespace', function(){
 |		// что-то делаем
 |	});
 |	// вызываем обработчик
 |	$('.class').trigger('click.namespace');
 |
 |	// вызываем все обработчики без пространства имён
 |	$('.class').trigger('click!');
 |
 |	// удаляем все обработчики click в данном пространстве имён
 |	$('.class').off('click.namespace');


 ==== Анимация ====

 .hide(speed, callback)	-| slow == 600 ms  
 .show(speed, callback)	 | fast == 200 ms

 .toggle()				- переключатель «hide → show» или «show → hide»
 .toggle(condition)		- condition -> true (видимо) 
									   false (скрыто)
	// 
	$('article img').toggle('slow', function(){
    		$(this).toggle('slow')
	})	

 // Вторым параметром может быть функция, которая выполняется после анимации
	//
	// скрываем все картинки
	$('img').hide('slow', function(){
		// опосля отображаем alert
		alert("Images was hidden");
	});

 --Закатывание и выкатывание элементов

 .slideUp(speed, callback)		-| анимация будет затрагивать лишь высоту блоков
 .slideDown(speed, callback)	 |
 .slideToggle(speed, callback)	 |

 -- opacyti --
 fadeIn(duration, callback) 		– изменяет « opacity» от 0 до предыдущего
 fadeOut(duration, callback) 		– изменяет «opacity» от текущего до 0
 fadeToggle(duration, callback) 	– переключатель между «In» и «Out»
 fadeTo(duration, opacity, callback) 	– изменяет значение «opacity» до требуемого значения
 -------------

 .animate(properties,duration,easing,callback)
		-  Данная функция берет один или несколько CSS-свойств
		   элемента и изменяет их от исходного до заданного
		   за N-ое количество итераций

	// fade...			
	$('article img').animate({
		'opacity':'hide'	// or  'opacity':'show'
	})
	//
	// resize to
	$('article img').animate({
	    'opacity':0.5,
	    'height':'50px',
	    'width':'250px'
	})
	//	
	// change current
	$('article img').animate({
	    'opacity':'-=0.1',
	    'height':'+=10px'
	})
 
 ---- ---- очередь
	// последовательная анимация
	$('#box ')
		// говорим что меняем
		.animate({left:'+=100'})
		// следующий вызов добавляется в очередь на выполнение
		.animate({top:'+=100'})

	// Для параллельного запуска анимации, необходимо будет внести следующие изменения:
	$('#box')
		// говорим что меняем
		.animate({left:'+=100'})
		// следующий вызов будет игнорировать очередь
		.animate({top:'+=100'}, {queue:false})

 -- очередь -- 
 .queue()	-  Метод, добавляющий экземпляр функции в очередь

 .queue(name)			- возвращает очередь с указанным именем name,
						  уже подключенную к первому элементу в обернутом наборе,
						  в виде массива функций
 .queue(name,function)	- добавляет функцию function в конец очереди с именем name 
						  для всех элементов из обернутого набора. 
						  Если в каком-либо элементе очередь с именем name отсутствует, она будет создана
 .queue(name,queue)		- замещает существующие очереди name во всех элементах, 
						  находящихся в обернутом наборе, очередью queue

 .dequeue(name)			- Удаляет самую первую функцию из очереди с именем name 
					  	  для каждого элемента в соответствующем наборе и выполняет ее

 .clearQueue(name)		- Удаляет все функции из очереди с именем name без их выполнения.

 .delay(duration,name)	-Добавляет задержку перед выполнением каждой функции из очереди с именем name
 :пример
 // добавление четырех функций в очередь
 $(‘img’).queue(‘chain’, function(){ say(‘First: ‘ + $(this).attr(‘alt’)); }); 
 $(‘img’).queue(‘chain’, function(){ say(‘Second: ‘ + $(this).attr(‘alt’)); });
 $(‘img’).queue(‘chain’, function(){ say(‘Third: ‘ + $(this).attr(‘alt’)); }); 
 $(‘img’).queue(‘chain’, function(){ say(‘Fourth: ‘ + $(this).attr(‘alt’)); });

 // По каждому щелчку из очереди удаляется одна функция
 $(‘button’).click(function(){ $(‘img’).dequeue(‘chain’);



 ---- ---- остановка
 .stop()	- позволяет остановить текущую анимацию на полпути,
		  а так же почистить очередь при необходимости
	//
	// останавливаем выполнение текущей анимации
	$('#box').stop();
	
	// останавливаем выполнение текущей анимации
	// и всех последующих (чистим очередь)
	$('#box').stop(true);

	// останавливаем выполнение текущей анимации и всех последующих
	// но применяем результат текущей
	$('#box').stop(true, true);

	// останавливаем выполнение только текущей анимации
	// и применяем её результат
	$('#box').stop(false, true);

 ---- Отключение всей анимации
 
 jQuery.fx.off = true;
 	  $.fx.off = true.

------------------------------------

 ==== DOM ====

 ---- создание нового элемента -----------------------
 $("<div> ... </div>")						-| создает новый элемент <div>
								 |				
 var $myDiv = $('<div id="my" class="some"></div>')		 |
								 |				
 var $myDiv = $('<div>', {'id':'my', 'class':'some'})		 | <--| эти способы быстрей
 var $myDiv = $('<div>').attr({'id':'my', 'class':'some'});	 | <--|



 $("<p>Hi there!</p>").insertAfter("#followMe");  	- вставить абзац <p> после элемента c id="followMe"
 
 $('<img>',						// Создаст основной элемент <img>
     {
	src: 'images/little.bear.png',
	alt: 'Little Bear',
	title:'I woof in your general direction',
	click: function(){				//  обработчик щелчка мышью
	      alert($(this).attr('title'));
	      }
      })
      .css({						// Оформление изображения
	cursor: 'pointer',
	border: '1px solid black',
	padding: '12px 12px 20px 12px',
	backgroundColor: 'white'
       })
      .appendTo('body');				// Включение элемента в документ


 .not(expression)	- Создает копию обернутого набора элементов 
			  		  и удаляет из нее элементы, соответствующие параметру expression.

 .filter(expression)- Создает копию обернутого набора и удаляет из нее элементы, 
					  которые не соответствуют критериям, определяемым параметром expression

 .slice(begin, end) - Создает и возвращает новый обернутый набор, 
					  содержащий непрерывную область первоначального набора.

 .slice(2,3)	-> получить 3-й элемент
 .slice(0,4)	-> отберет все элементы на странице и затем создаст набор из первых четырех элементов
 .slice(4)		-> Она отберет все элементы на странице и затем вернет набор – все элементы, 
				   за исключением четырех первых


---------------------------------------------------------------
 ----  Получение элементов из обернутого набора ----
 
 $('img')[0]		-| Извлечение элементов по индексу
 	.get(0)		 |
	.first()
	.last()

	.toArray()	- Извлечение всех элементов в виде массива
 	
	-----
	.index('img#Me')- поиск индекса определенного элемента в обернутом наборе
 ---------------------------------------------------
 ---- вставка ---- 

 after(content) 	— «$("p").after("<hr/>") », «после каждого параграфа будет вставлена линия»
 insertAfter(element)	— «$("<hr/>").insertAfter("p")» «линия будет вставлена после каждого параграфа»

 before(content) 	— вставляет контент перед каждым выбранным элементом 
 insertBefore(element) 	— вставляет элементы из выборки перед каждым 
 
 append(content)	— «$("p").append("<hr/>")» «в конец каждого параграфа будет добавлена линия»
 appendTo(element)	— «$("<hr/>").appendTo("p")» «линия будет добавлена в конец каждого параграфа»

 prepend(content)	— вставляет контент в начало каждого элемента из выборки
 prependTo(element)	— вставляет выбранный контент в начало каждого элемента переданного в качестве
			  аргумента

 replaceWith(content) 	– заменяет найденные элементы новым
 replaceAll(target) 	– вставляет контент в замен найденному
			$("что-то находим").replaceWith("на что меняем")
			$("что вставляем").replaceAll("вместо чего")

 wrap(element)		– оборачиваем каждый найденный элемент новым элементом
 wrapAll(element)	– оборачивает найденные элементы новым элементом
 wrapInner(element)	– оборачивает контент каждого найденного элемента новым элементом,
			  берём конфеты, убираем фантики, заворачиваем в свой фантик, 
			  и сверху заворачиваем в родной фантик
 unwrap()		– удаляет родительский элемент у найденных элементов

 clone(withDataAndEvents)	– клонирует выбранные элементы, для дальнейшей вставки копий назад в DOM,
				  позволяет так же копировать и обработчики событий
 detach()		– удаляет элемент из DOM, но при этом сохраняет все данные о нём в jQuery, 
			  следует использовать, если надо удалить элемент, а потом вернуть его обратно
 empty() 		– удаляет текст и дочерние DOM элементы
 remove() 		– удаляет элемент из DOM, насовсем
 html() 		– вернёт HTML заданного элемента
 html(newHtml) 		– заменит HTML в заданном элементе

 text()			– вернёт текст заданного элемента, если внутри элемента будут другие HTML тэги, 
			  то вернётся сборная солянка из текста всех элементов
 text(newText) 		– заменит текст внутри выбранных элементов,
			  при попытке вставить таким образом HTML, будет получен текст


clone(copyHandlers)	- Создает копии элементов в обернутом наборе и возвращает новый обернутый набор копий. 
					  Копируются как сами элементы, так и все вложенные в них элементы. 
					  copyHandlers = true, вместе с элементами будут скопированы обработчики событий. 
								   = false, обработчики событий копироваться не будут.


 ---- ---- Размеры ----

 offset()		– вернёт позицию DOM элемента относительно document'а,
			  в виде объекта: «{ top: 10, left: 30 }»

 offset({ top: 10, left: 30 }) – устанавливаем расположение DOM элемента по указанным координатам

 position() 		– вернёт позицию DOM элемента относительно родительского элемента

 height()		– возвращает высоту элемента за вычетом отступов и границ;
			  если у нас несколько элементов в выборке, вернётся первый; 
			  значение, в отличии от метода «css('height')»,
			  возвращается без указания единиц измерения
 height(height)		— устанавливает высоту всех элементов в выборке, 
			  если значение высоты передано без указания единиц измерения,
			  то это будут «px»
			  // в качестве памятки, взято из мануала
			  $(window).height();	 	// высота окна
			  $(document).height(); 	// высота HTML документа

 width() 		 –| ведут себя аналогично методу «.height()»,
 width(width)		  | но работают с шириной элемента
 
 Методы «.height()» и «.width()» 
	не изменяют своего поведения в зависимости от выбранной блочной модели, 
	т.е. они всегда возвращают параметры области внутри margin, padding и border'а элемента.

 innerHeight()		–| вернут соответственно высоту и ширину элемента, 
 innerWidth() 		 | включая «padding»

 outerHeight()		–| вернут высоту и ширину элемента,  
 outerWidth() 		 | включая «padding» и «border»

 outerHeight(true)	–| высота и ширина,
 outerWidth(true)  	 | включая «padding», «border» и «margin»

 scrollLeft()		– возвращает значение «проскроленности» по горизонтали
			  первого элемента из выборки
 scrollLeft(value)	– устанавливает значение горизонтального скрола 
			  для каждого элемента из выборки
 scrollTop()		– возвращает значение «проскроленности» по вертикали
			  первого элемента из выборки
 scrollTop(value)	– устанавливает значение вертикального скрола 
			  для каждого элемента из выборки

 Значение «scrollTop» и «scrollLeft» поддаются анимации и не работают для спрятанных элементов DOM
 -----------------

 ==== Формы ====
 ---- События ----
 change 		— изменение значения элемента
 submit 		— отправка формы
 -----------------

 ---- Методы -----
 .serialize() 		– он в ответе за «сбор» данных с формы в удобном для передачи данных формате:
			  name=Ivan&role=Admin
 
 .serializeArray() 	– он собранные данные представляет в виде объекта:
			  [	{	name:"name",
					value:"Ivan"
				},
				{	name:"role",
					value:"Admin"
				},
			  ]

 val() 			– получение значения первого элемента формы из выборки
 val(value) 		– установка значение всем элементам формы из выборки

 ---- ---- для radiobutton
	$('input[type=radio][name=choose][value=2]').prop('checked', true);

 ---- ---- для checkbox
	$('input[name=check] ').prop('checked', true);

 ---- ---- Проверяем «чекнутость» простым скриптом:
	$('input[name=check] ').prop('checked')
	// или чуть более наглядным способом
	$('input[name=check] ').is(':checked')


 -----------------
 .disable()		- деактивация элемента

-----------------------------

 ---- each() --- $(this) --
 .each()		- для каждого элемента в выборке
			 | $('а[href^=http://)').each(function() {	// выбрать ссылки 
			 |						// и для каждого выполнить функцию
			 |	var extLink = $(this).attr('href');	// получить значение атрибута
			 |						// текущей ссылки
			 |	$('#bibList') .append('<li>' + extLink + '</li>');
			 | });


 -----------------
==== обработчик собитий ====
 .bind("click", function() { ... });

bind(eventType,data,handler)
bind(eventMap)


$(‘*’).unbind(‘click.editMode’);	// удаление обработчика
$(‘*’).unbind(‘.fred’);				Эта инструкция отключит все обработчики событий, 
									помещенные в пространство имен fred.


  -- несколько обработчиков
$(‘.whatever’).bind({
	click: function(event) 		{ /* обработчик события щелчка мышью */ },
	mouseenter: function(event) { /* обработчик события наведения указателя мыши */	},
	mouseleave: function(event) { /* обработчик события вывода указателя мыши за пределы элемента */ }
});

  --
.one()	 	Этот метод устанавливает обработчик события однократного запуска. 
			После первого вызова обработчика он автоматически отключается. 
  			Синтаксис этого метода напоминает синтаксис метода bind()

  --
.live()		позволяет заранее устанавливать обработчики событий для элементов,
			которые еще не существуют!

			! Почитать еще раз, до конца не понял
			! лучше не использовать
.die()		Удаление динамических обработчиков событий (live())


  -- 
trigger(eventType,data)		Вызывает любые обработчики событий, 
							установленные для обработки событий типа eventType во всех соответствующих элементах.

triggerHandler(eventType,data)	Вызывает любые обработчики событий, установленные для обработки
								событий типа eventType во всех соответствующих элементах, не запуская
								процесс распространения события и не вызывая запуск семантических
								действий по умолчанию.

.eventName()						Вызывает любые обработчики событий, 
								установленные для обработки сoбытия того типа, 
								название которого совпадает с именем метода, 
								во всех соответствующих элементах. 
	Поддерживаются следующие методы:	blur	 focusin	 mousedown	 resize	
										change	 focusout	 mouseenter	 scroll
										click	 keydown	 mouseleave	 select
										dblclick keypress	 mousemove	 submit
										error	 keyup		 mouseout	 unload
										focus	 load		 mouseover
	$(element).mouseenter(function1).mouseleave(function2);



  -- события 
 blur		 focus		 keyup		 mousemove	 resize
 change		 focusin	 load		 mouseout	 scroll
 click		 focusout	 mousedown	 mouseover	 select
 dblclick	 keydown	 mouseenter	 mouseup	 submit
 error		 keypress	 mouseleave	 ready		 unload

  -- дополнительные обработчики

.toggle(listener1,listener2, ...)	Для всех элементов обернутого набора 
									устанавливает указанные функции в качестве обработчиков события 
									щелчка мышью, сменяющих друг друга по событию щелчка мышью.
  ~~ 
$(‘img[src*=small]’)
  .toggle(
	function() { $(this).attr(‘src’, $(this).attr(‘src’).replace(/small/,’medium’)); },
	function() { $(this).attr(‘src’, $(this).attr(‘src’).replace(/medium/,’large’)); },
	function() { $(this).attr(‘src’, $(this).attr(‘src’).replace(/large/,’small’)); }
  );


.hover(enterHandler,leaveHandler)	Устанавливает обработчики событий mouseenter и mouseleave для элементов
.hover(handler)						соответствующего набора. 
									Эти обработчики вызываются, 
									только когда указатель мыши входит и выходит за пределы области, 
									покрытой элементом, а переходы во вложенные элементы игнорируются.



==============================
== вспомогательные функции ==
$.trim(value)				- Удаляет все начальные или концевые пробельные символы 
							  из строки value и возвращает результат.
							  $(‘#someField’).val($.trim($(‘#someField’).val()));


$.each(container,callback)	- Выполняет цикл по элементам контейнера container,
							  вызывая функцию callback для каждого элемента.

$.grep(array,callback,invert)	- Выполняет цикл по элементам массива array, 
								  вызывая функцию callback для каждого элемента. 
								  Возвращаемое значение функции callback определяет, 
								  должно ли войти это значение в новый массив, который возвращается как значение функции $.grep(). 
								  Если параметр invert опущен или имеет значение false 
								    и возвращаемое значение функции callback равно true, 
									то данные включаются в новый массив. 
								  Если параметр invert имеет значение true 
									и возвращаемое значение функции callback равно false, 
									данные также включаются в новый массив.

 var bigNumbers = 
		$.grep(originalArray,function(value) {
			return value > 100;
		});

$.map(array,callback)	- Выполняет цикл по элементам массива array, 
						  вызывая функцию обратного вызова callback для каждого элемента массива 
						  и собирая возвращаемые значения функции в новый массив.

$.inArray(value,array)	- Возвращает индекс первого вхождения значения value в массив array.

$.makeArray(object)		- Преобразует объект, подобный массиву, в массив JavaScript.
						  // например NodeList

$.unique(array)			- Получает массив элементов DOM 
						  и возвращает массив уникальных элементов из оригинального массива.

$.merge(array1,array2)	- Добавляет элементы из второго массива в первый и возвращает результат.
						  В ходе выполнения функции первый массив модифицируется и возвращается в качестве результата.

$.extend(deep,target,source1,source2,...,sourceN)
	- Расширяет объект, полученный в параметре target, свойствами остальных объектов, передаваемых функции 
	  в виде дополнительных параметров.

$.param(params,traditional)
	- Преобразует переданную ей информацию в строку, пригодную для использования в качестве строки запроса.
	  В аргументе params допускается передавать массив элементов формы, обернутый набор jQuery или объект JavaScript. 
	  Функция формирует корректную строку запроса, кодируя в соответствии с правилами все имена и значения параметров.
		params 	- (массив | обернутый набор | объект) 
				  Значение, которое будет преобразовано в строку запроса. 
				  Если функции передается массив элементов или обернутый набор, 
				  в строку запроса будут добавлены пары имя/значение, представляющие элементы управления форм. 
				  Если функции передается объект JavaScript, имена и значения параметров будут сформированы из свойств этого объекта.

		traditional - (логическое значение) 
					  Необязательный флаг, который вынуждает эту функцию выполнять преобразование с использованием алгоритма, 
					  реализованного в версиях библиотеки, предшествовавших версии jQuery 1.4

$.isArray(o)		- Возвращает true, если объект o является массивом JavaScript 
					  (но при этом объект o не является объектом, подобным массиву, таким как обернутый набор).
$.isEmptyObject(o)	- Возвращает true, если объект o является объектом JavaScript
					  без свойств, включая свойства, унаследованные через prototype.

$.isFunction(o)		- Возвращает true, если объект o является функцией JavaScript. 
					  Внимание: в Internet Explorer встроенные функции, такие как alert() и confirm() , 
					  а также методы элементов ошибочно определяются, как функции.

$.isPlainObject(o)	- Возвращает true, если объект o является объектом JavaScript, 
					  созданным с помощью фигурных скобок {}
  					  или с помощью конструкции new Object().
$.isXMLDoc(node)	- Возвращает true, если объект node является документом XML или узлом документа XML.


$.noop()						- Ничего не делает.
$.contains(container,containee)	- Проверяет, входит ли элемент containee в состав элемента container.
$.data(element,name,value)		- Сохраняет или извлекает данные с именем name, ассоциированные с элементом element.
$.removeData(element,name)		- Удаляет данные, ассоциированные с элементом element.

$.proxy(function,proxy)			- Создает копию функции с привязанным к ней объектом proxy,
$.proxy(proxy,property)			  который будет играть роль контекста функции при вызове ее как функции обратного вызова.

$.parseJSON(json)				- Выполняет синтаксический анализ строки в формате JSON и возвращает результат.

$.getScript(url,callback)		- Загружает сценарий, указанный в параметре url, выполняя запрос GET к указанному серверу; 
								  в случае успеха вызывает функцию обратного вызова.

=============================
==== Ajax ============================================================================================
 function funcBefore(){
	$("#information").text("Ожидание данных...");
 }
 function funcSuccess(data){
	$("#information").text("data");
 }
 $(document).ready(function(){
	$("#load").bind("click", function(){
		var admin = "Admin";
		$.ajax({
			url: "content.php",
			type: "POST",
			data: ({name: admin, number: 5}),
			dataType: "ntml",
			beforeSend: funcBefore,
			success: funcSuccess
		});
     	});
 });

 -- методы --
 abort()									- Отменяет выполнение текущего запроса.
 getAllResponseHeaders()					- Возвращает единую строку, содержащую имена и значения всех заголовков ответа.
 getResponseHeader(name)					- Возвращает значение заголовка с указанным именем.
 open(method,url,async, username,password)	- Определяет метод отправки запроса (GET или POST) и URL-адрес. 
											  Дополнительно запрос может быть объявлен как синхронный(false), 
											  и к нему могут прилагаться имя пользователя и пароль 
											  для прохождения процедуры аутентификации на сервере.
 send(content)								- Инициализирует запрос заданным содержимым (необязательный параметр).
 setRequestHeader(name,value)				- Устанавливает заголовок запроса с заданным именем и содержимым.

 -- свойства --
 onreadystatechange 		- Обработчик события, вызываемый при изменении состояния запроса.
 readyState 				- Целочисленное значение, определяющее состояние запроса:
								0 – не инициализирован;
								1 – ввод;
								2 – отправлен;
								3 – идет обмен;
								4 – завершен.
 responseText				- Содержимое ответа.
 responseXML				- Если содержимое ответа представляет собой документ XML,
							  из такого содержимого создается XML DOM.
 status 					- Код статуса, полученный от сервера. Например:
							  200 – успех, 404 – страница не найдена. 
 statusText 				-Текстовая строка сообщения о состоянии (статуса), полученная в ответе.


 -- Инициализация запроса --
 1. Указать HTTP-метод выполнения запроса (POST или GET).
 2. Указать URL ресурса на стороне сервера, которому будет направляться запрос.
 3. Указать объекту XHR, как он должен информировать нас о ходе выполнения запроса.
 4. Предоставить информацию, которая будет передаваться в теле запроса POST.
 --

 -- функции --

.load(url,parameters,callback)	- Инициирует запрос Ajax по заданному URL-адресу, 
								  возможно, с дополнительными параметрами.
								  Содержимое всех элементов в обернутом наборе будет замещено текстом ответа.
								  url - (строка) URL-адрес ресурса на стороне сервера, которому отправляется запрос.
								  parameters(строка | объект | массив) 
									Определяет данные, которые передаются в виде параметров запроса. 
									Этот аргумент может быть строкой, которая будет использоваться, как строка запроса; 
									объектом, свойства которого будут преобразованы в параметры запроса; 
									или массивом объектов, имена и значени свойств которых определяют пары имя/значение параметров запроса.
								  callback - Если в этом параметре передается объект или массив, 
									запрос выполняется методом POST; 
									если отсутствует или в нем передается строка, – методом GET.
 
	$(‘.injectMe’).load(‘/someResource div’);
		отфильтровать из ответа все элементы, не являющиеся экземплярами <div>

 .serialize()		- Создает правильно отформатированную и закодированную строку запроса 
					  из всех успешных элементов управления формы в обернутом наборе.
					-> Отформатированная строка запроса.

 .serializeArray()	- Собирает значения из всех успешных элементов формы в обернутом наборе в массив объектов, 
					  содержащих имена и значения элементов управления.
					-> Массив с данными формы.

~~~~
 callback(1, 2, 3) 	1: текст ответа, интерпретация которого зависит от значения параметра type,
				 	2: код статуса
					3: объект XHR
~~~~

 $.get(url,parameters,callback,type)	- Инициирует запрос GET(POST) к серверу, 
 $.post(url,parameters,callback,type)	  используя заданный URL-адрес
										  и все параметры, передаваемые в виде строки запроса.
											type - html, text, xml, json, script или jsonp.
										-> Экземпляр XHR.

 $.getJSON(url,parameters,callback)		- Инициирует запрос GET к серверу, 
										  используя заданный URL-адрес 
										  и любые параметры, переданные в виде строки запроса. 
										  Ответ сервера интерпретируется как строка в формате JSON, 
										  а полученные из нее данные передаются функции обратного вызова.
										-> Экземпляр XHR.

 $.ajax(options)						- Инициирует Ajax-запрос
										-> Экземпляр XHR.
	url		- (строка) URL-адрес запроса.
	type	- (строка) Применяемый метод HTTP, обычно POST или GET. 
			  по умолчанию используется метод GET.
	data	- (строка | объект | массив) 
			  Определяет значения, которые будут использоваться как параметры запроса 
			  и передаваться вместе с запросом. 
			  Если GET, эти данные передаются в виде строки запроса.
			  Если POST, данные передаются в теле запроса. 
			  В любом случае кодирование значений выполняется вспомогательной функцией $.ajax.
			  В этом параметре допускается передавать строку, 
			  которая будет использоваться как строка запроса или как тело ответа; 
			  объект, свойства которого будут преобразованы в параметры запроса; 
			  или массив объектов, имена и значения свойств которых определяют пары имя/значение параметров запроса.
	dataType -(строка) Ключевое слово, идентифицирующее тип данных, которые, как ожидается, будут получены в ответе. 
			  Это значение определяет, каким образом должны быть обработаны данные, если это потребуется,
			  прежде чем они будут переданы функции обратного вызова. 
			  Допустимы следующие значения:
				xml    – текст ответа анализируется как документ XML, функции обратного вызова передается полученное дерево DOM XML.
				html   – текст ответа передается функции обратного вызова без предварительной обработки.
					     Все блоки <script> внутри полученного фрагмента HTML выполняются.
				json   – текст ответа анализируется как строка JSON, функции обратного вызова передается полученный объект.
				jsonp  – напоминает формат json, за исключением того, что допускает удаленное создание сценариев 
						 (предполагается, что сервер поддерживает данную возможность).
				script – текст ответа передается функции обратного вызова, 
						 но перед этим ответ обрабатывается как инструкция или инструкции JavaScript.
				text   – предполагается, что ответ содержит обычный текст.

			  Ресурс на сервере отвечает за установку соответствующего заголовка ответа content-type.
			  Если этот параметр опущен, текст ответа передается функции обратного вызова без какой-либо предварительной обработки.
	cache	- (логическое значение) Если имеет значение false, ответ не будет кэшироваться броузером. 
			  По умолчанию принимает значение true когда параметр dataType имеет значение script или jsonp.
	context	- (элемент) Определяет элемент,
			  который будет использоваться в качестве контекста для всех функций обратного вызова, ассоциированных с запросом.
	timeout	- (число) Устанавливает предельное время ожидания ответа на запрос в миллисекундах.
			  Если запрос не завершен в течение указанного времени, 
			  его выполнение прерывается с вызовом функции обработки ошибок error (если определена).

	global	- (логическое значение) Разрешает (true) или запрещает (false) возбуждение глобальных событий Ajax. 
			  Это нестандартные события, которые могут вызываться на различных этапах или при некоторых условиях в процессе выполнения запроса Ajax.
			  по умолчанию (true) возбуждение глобальных событий разрешено.
	
	contentType	- (строка) Тип содержимого в запросе. 
				  Если опущен, по умолчанию предполагается тип application/x-www-form-urlencoded; 
				  этот же тип используется по умолчанию при отправке форм.
	success		- (функция) Функция, вызываемая в случае, если код статуса в ответе сообщает об успехе. 
				  Тело ответа передается этой функции в виде первого параметра,
				  предварительно пройдя обработку в соответствии со значением параметра dataType. 
				  Вторым параметром функции передается код статуса,
				  который (в данном случае всегда) сообщает об успехе. 
				  В третьем параметре передается ссылка на экземпляр XHR.
	error 		- (функция) Функция, вызываемая в случае, если код статуса в ответе сообщает об ошибке.
				  Функции передаются три аргумента: 
					экземпляр XHR, 
					строка сообщения о состоянии (в данном случае одно из следующих значений: error, timeout, notmofified или parseerror) 
					и необязательный объект-исключение, иногда возвращаемый экземпляром XHR.
	complete	- (функция) Функция, вызываемая по завершении запроса.
				  ­Получает два аргумента: 
					экземпляр XHR 
					и строку сообщения о состоянии – success или error. 
				  Если также заданы функции success и error, данная функция будет вызвана после них.
	beforeSend	- (функция) Функция, вызываемая перед инициацией запроса.
				  Ей передается экземпляр XHR, 
				  и она может использоваться для установки дополнительных заголовков 
				  или выполнения других предварительных операций.
				  Если эта функция вернет значение false, выполнение запроса будет прервано.
	async		- (логическое значение) Если задано значение false, запрос выполняется как синхронный.
				  По умолчанию выполняется асинхронный запрос.
	processData	- (логическое значение) Если задано значение false, кодирование передаваемых данных в формат URL не производится.
				  По умолчанию данные кодируются в формат URL, применяемый при передаче запросов типа application/x-www-form-urlencoded.
	dataFilter	- (функция) Функция, которая вызывается для фильтрации данных в ответе. 
				  Этой функции передается необработанный ответ и значение параметра dataType. 
				  Предполагается, что эта функция вернет «очищенные» данные.
	ifModified 	- (логическое значение) При заданном значении true запрос считается успешным, 
				  только если содержимое ответа не изменилось с момента последнего запроса, 
				  в соответствии с заголовком Last-Modified.
				  Если опущен, заголовок не проверяется. 
				  По умолчанию имеет значение false.
	jsonp	 	- (строка) Определяет имя функции, которое будет подставлено в запрос типа jsonp, в параметр с именем callback.
	username	- (строка) Имя пользователя, которое будет использоваться в случае запроса HTTP на аутентификацию.
	password	- (строка) Пароль, который будет использоваться в случае запроса HTTP на аутентификацию.

	scriptCharset -(строка) Кодировка символов для использования в запросах типа script и jsonp, 
				   когда на стороне сервера и на стороне клиента 
				   используются различные кодировки символов для представления содержимого.
	xhr			- (функция) Функция, создающая экземпляр XHR.
	traditional - (логическое значение) Если имеет значение true, используется традиционный алгоритм сериализации параметров.
				

 $.ajaxSetup(options) 	- Устанавливает переданный набор параметров как значения по умолчанию для всех последующих вызовов функции $.ajax().
						  options - (объект) как $.ajax()
									кроме success, error и completion

 -- типы событий ajax --

 ajaxStart		- Возбуждается при запуске запроса Ajax, 
 [global]		  при условии, что к этому моменту не было других активных запросов. 
				  При одновременном выполнении нескольких запросов, это событие возбуждается только для первого запроса.
				  Входные параметры отсутствуют.
 beforeSend 	- Обработчик этого события вызывается с целью 
 [local]		  предоставить возможность внести какие-либо изменения в экземпляр XHR перед тем, 
				  как запрос будет отправлен на сервер. 
				  Обработчик может отменить запрос, вернув значение false.
 ajaxSend		- Возбуждается с целью предоставить возможность внести какие-либо изменения 
 [global]		  в экземпляр XHR перед тем, как запрос будет отправлен на сервер.

 success		- Вызывается после того как запрос вернется от сервера 
 [local]		  и ответ будет содержать код статуса, свидетельствующий об успехе.

 ajaxSuccess	- Возбуждается после того, как запрос вернется от сервера, 
 [global]		  и ответ будет содержать код статуса, свидетельствующий об успехе

 error			- Вызывается после того, как запрос вернется от сервера,
 [local]		  и ответ будет содержать код статуса, свидетельствующий об ошибке

 ajaxError		- Возбуждается после того, как запрос вернется от сервера,
 [global]		  и ответ будет содержать код статуса, свидетельствующий об ошибке. 
				  Четвертым необязательным параметром передается ссылка на ошибку, если таковая имеется.
 complete		- Вызывается после того, как запрос вернется от сервера, независимо от кода состояния. 
 [local]		  Эта функция вызывается даже для синхронных запросов.

 ajaxComplete	- Возбуждается после того, как запрос вернется от сервера, независимо от кода состояния.
 [global]		  Обработчик этого события вызывается даже для синхронных запросов.

 ajaxStop		- Возбуждается после того, как завершатся все этапы обработки запроса 
 [global]		  и при отсутствии других активных запросов, выполняемых параллельно.
				  Входные параметры отсутствуют.
 -----------------------
 -------------

==== 
---- Сохранение собственных данных в элементах
.data(name,value)	- Сохраняет значение value в хранилище, управляемом библиотекой jQuery,
					  для всех элементов набора.
.data(name)			- Извлекает из первого элемента в обернутом наборе значение с именем name,
					  сохраненное ранее.
.removeData(name)	- Удаляет ранее сохраненные данные с именем name из всех элементов
					  в обернутом наборе.



===============================================
== броузер ==
-- Флаги jQuery, определяющие возможности броузера
 $.support

.boxModel			- Имеет значение true, если броузер поддерживает стандартную блочную модель.
					  Этот флаг не устанавливается, пока документ не будет готов к отображению. 
.cssFloat
.hrefNormalized
.htmlSerialize
.leadingWhitespace
.noCloneEvent
.objectAll
.opacity
.scriptEval
.style
.tbody

$.noConflict(jqueryToo)		Передает контроль над именем $ другой библиотеке, 
							что позволяет применять различные библиотеки на тех же страницах, что и jQuery. 
							После того как эта функция выполнится, все функции библиотеки jQuery придется вызывать 
							с использованием идентификатора jQuery, а не $

							jqueryToo -> (логическое значение) 
							Если в этом параметре передать значение true, функция освободит не только идентификатор $, 
							но и идентификатор jQuery

var $j = jQuery				Чтобы компенсировать потерю короткого и любимого идентификатора $, 
							можно определить собственный короткий (но не конфликтный) псевдоним для jQuery

как вариант еще
(function($) { /* здесь располагается тело функции */ })(jQuery);


=============
==== собственные модули ==
----
(function($){
	$.moduleName = function( ... ){ ... } 
})(jQuery);
----

---- пример 
$.toFixedWidth(value,length,fill)
		Форматирует значение как строку фиксированной длины. 
		Позволяет указать необязательный символ-заполнитель.
		Если длина числового значения превышает заданную, 
		цифры старших разрядов отсекаются до заданной длины.

(function($){
  $.toFixedWidth = function(value,length,fill) {
	var result = (value || ‘’).toString();
	fill = fill || ‘0’;
	var padding = length - result.length;

	if (padding < 0) {
	  result = result.substr(-padding);
	} else {
		for (var n = 0; n < padding; n++) 
		  result = fill + result;
	}
	return result;
  };
})(jQuery);

==========================

==== UI ====
 effect(type,options,speed,callback)
	Воспроизводит указанный эффект type для элементов в обернутом наборе.

 type: 	blind, bounce, clip, drop, explode, fade, fold, highlight, puff,
	   	pulsate, scale, shake, size, slide или transfer.

  -- Синтаксис методов управления видимостью элементов
 show(effect,options,speed,callback) 
 hide(effect,options,speed,callback)
 toggle(effect,options,speed,callback)

 -- Синтаксис методов управления классами CSS
 addClass(class,speed,easing,callback)
 removeClass(class,speed,easing,callback)
 toggleClass(class,force,speed,easing,callback)

 -- Синтаксис метода switchClass
 switchClass(removed,added,speed,easing,callback)


 -- easing: 
linear			 aseInOutQuart	 easeOutCirc
swing			 easeInQuint 	 easeInOutCirc
jswing			 easeOutQuint	 easeInElastic
easeInQuad		 easeInOutQuint	 easeOutElastic	
easeOutQuad 	 easeInSine		 easeInOutElastic
easeInOutQuad	 easeOutSine 	 easeInBack
easeInCubic		 easeInOutSine	 easeOutBack
easeOutCubic	 easeInExpo		 easeInOutBack
easeInOutCubic	 easeOutExpo 	 easeInBounce
easeInQuart		 easeInOutExpo	 easeOutBounce
easeOutQuart	 easeInCirc		 easeInOutBounce

=============
====================================================================================================
1. верстка.jq.Берб Бибо, Иегуда Кац - jQuery. Подробное руководство по продвинутому JavaScript (High Tech) - 2011

